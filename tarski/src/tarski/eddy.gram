name ParseEddy
start Stmts
token Token
simple (?<!Lit|Ident|Stmt|Elif)Tok
scored ^(AExp|AStmt)$

preamble package tarski
preamble import tarski.Tokens._
preamble import tarski.AST._
preamble import tarski.Mods._
preamble import tarski.Arounds._
preamble import tarski.Operators._
preamble import utility.Locations._

// Identifiers, including fake keywords
Ident Loc[String]
  IdentTok { Loc($1.name,$1r) }
  ElifTok  { Loc($1.s,$1r) }
  ThenTok  { Loc("then",$1r) }
  UntilTok { Loc("until",$1r) }
  InTok    { Loc("in",$1r) }
  ThisTok  { Loc("this",$1r) }
  SuperTok { Loc("super",$1r) }

// Modifiers
Mod Loc[Mod]
  AtTok Ident                    { Loc(Annotation($1r,$2.x,$2.r),$r) }
  PublicTok                      { Loc(Public,$1r) }
  ProtectedTok                   { Loc(Protected,$1r) }
  PrivateTok                     { Loc(Private,$1r) }
  AbstractTok                    { Loc(Abstract,$1r) }
  StaticTok                      { Loc(Static,$1r) }
  FinalTok                       { Loc(Final,$1r) }
  StrictfpTok                    { Loc(Strictfp,$1r) }
  TransientTok                   { Loc(Transient,$1r) }
  VolatileTok                    { Loc(Volatile,$1r) }
  SynchronizedTok                { Loc(Synchronized,$1r) }

// Option
Option[a] Option[a]
  ""                             { None }
  a                              { Some($1) }

// Lists
Commas1[a] CommaList1[a]
  a                              { SingleList($1) }
  a CommaTok Commas1[a]          { $3.preComma($1,$2r) }
Commas2[a] CommaList2[a]
  a CommaTok Commas1[a]          { $3.preComma($1,$2r) }
Juxts1[a] List[a]
  a                              { List($1) }
  a Juxts1[a]                    { $1 :: $2 }
Juxts2[a] List[a]
  a Juxts1[a]                    { $1 :: $2 }
SingleJuxt1[a] JuxtList[a]
  a                              { SingleList($1) }
  Juxts2[a]                      { JuxtList2($1) }
Ands[a] AndList1[a]
  a                              { SingleList($1) }
  a AndTok Ands[a]               { $3.preAnd($1,$2r) }
List[a] KList[a]
  ""                             { EmptyList }
  List1[a]                       { $1 }
List1[a] KList[a]
  a                              { SingleList($1) }
  Commas2[a]                     { $1 }
  Juxts2[a]                      { JuxtList2($1) }
List2[a] KList[a]
  a CommaTok Commas1[a]          { $3.preComma($1,$2r) }
  a Juxts1[a]                    { JuxtList2($1 :: $2) }
Juxts0[a] List[a]
  ""                             { Nil }
  Juxts1[a]                      { $1 }
Commas0[a] CommaList[a]
  ""                             { EmptyList }
  Commas1[a]                     { $1 }

// Dims
Dims List[SGroup]
  ""                                           { Nil }
  LBrackTok Right Dims                         { SGroup($1r,$2.r) :: $3 }
DimExps List[Grouped[Option[AExp]]]
  ""                                           { Nil }
  LBrackTok Option[ExpAssign] Right DimExps    { Grouped($2,SGroup($1r,$3.r)) :: $4 }

// Types.  Most of the logic is shared with expressions.
Type AExp
  ExpHigh                           { $1 }
  QuestionTok WildcardBounds        { WildAExp($1r,$2) }
TypeArgs Grouped[KList[AExp]]
  LtTok List[Type] GtSep GtTok      { Grouped($2,SGroup($1r,$4r)) }
GtSep Unit
  ""                                { () }
  RShiftSepTok                      { () }
  UnsignedRShiftSepTok              { () }
WildcardBounds Option[WildBound]
  ""                                { None }
  ExtendsTok Type                   { Some(WildBound(Extends,$1r,$2)) }
  ColonTok Type                     { Some(WildBound(Extends,$1r,$2)) }
  SuperTok Type                     { Some(WildBound(Super,$1r,$2)) }

// Type parameters
//TypeParam
//  Mod Ident Option[TypeBounds]
//TypeBounds
//  ExtendsTok TypeBoundArgs
//  ColonTok TypeBoundArgs
//TypeBoundArgs
//  List1[Type]
//  Ands[Type]

// Classes
ClassBody AClassBody
  AnonBodyTok                    { AAnonClassBody($1,$1r) }
// TODO: ClassDecl

// Blocks
Block AStmt
  StmtTok                        { TokAStmt($1,$1r) }
  LCurlyTok Stmts Right          { BlockAStmt($2,SGroup($1r,$3.r)) }
Stmts List[AStmt]
  ""                             { Nil }
  SemiTok Stmts                  { SemiAStmt(EmptyAStmt($1r.before),$1r) :: $2 }
  StmtHelper                     { List($1) }
  StmtHelperBS SemiTok Stmts     { SemiAStmt($1,$2r) :: $3 }

// Statement
// Suffix BS means before semicolon
Stmt AStmt
  SemiTok                                                    { SemiAStmt(EmptyAStmt($1r.before),$1r) }
  StmtHelper                                                 { $1 }
  StmtHelperBS SemiTok                                       { SemiAStmt($1,$2r) }
MaybeStmt AStmt
  ""                                                         { HoleAStmt(SRange.empty) }
  Stmt                                                       { $1 }
StmtHelper AStmt
  StmtHelperBS                                               { $1 }
  IfTok AfterIfA                                             { $2($1r) }
  WhileUntil MaybeParenExp MaybeDo                           { WhileAStmt($1.r,$1.x,$2._1,$2._2,HoleAStmt($2._2.r.union($3).after)) }
  ForTok Left ForInfo Right                                  { ForAStmt($1r,$3,Around($2,$4),HoleAStmt($4.r.after)) }
  ForTok ForInfo                                             { { val ir = $2.r; ForAStmt($1r,$2,NoAround(ir),HoleAStmt(ir.after)) } }
  SynchronizedTok MaybeParenExp MaybeDo                      { SyncAStmt($1r,$2._1,$2._2,HoleAStmt($2._2.r.after)) }
StmtHelperBS AStmt
  Type List1[VarDecl]                                        { VarAStmt(Nil,Some($1),$2) }
  Juxts1[Mod] Option[Type] List1[VarDecl]                    { VarAStmt($1,$2,$3) }
  Block                                                      { $1 }
  ExpAssign                                                  { ExpAStmt($1) }
  AssertTok ExpAssign                                        { AssertAStmt($1r,$2,None) }
  AssertTok ExpAssign ColonTok ExpAssign                     { AssertAStmt($1r,$2,Some(($3r:SRange,$4))) }
  BreakTok Option[Ident]                                     { BreakAStmt($1r,$2) }
  ContinueTok Option[Ident]                                  { ContinueAStmt($1r,$2) }
  ReturnTok Option[ExpAssign]                                { ReturnAStmt($1r,$2) }
  ThrowTok ExpJuxt                                           { ThrowAStmt($1r,$2) }
  // LabelStmt
  IfTok AfterIfB                                             { $2($1r) }
  WhileUntil ParenExp MaybeDo Stmt                           { WhileAStmt($1.r,$1.x,$2._1,$2._2,$4) }
  WhileUntil ExpAssignNP DoTok Stmt                          { WhileAStmt($1.r,$1.x,$2,NoAround($4.r),$4) }
  WhileUntil ExpAssignNP                                     { /* null */ { val er = $2.r; filterNoStartsWithParen[AStmt]($2)(WhileAStmt($1.r,$1.x,_,NoAround(er),EmptyAStmt(er.after))) } }
  DoTok MaybeStmt WhileUntil MaybeParenExp                   { DoAStmt($1r,$2,$3.r,$3.x,$4._1,$4._2) }
  ForTok Left ForInfo Right Stmt                             { ForAStmt($1r,$3,Around($2,$4),$5) }
  ForTok ForInfo DoTok Stmt                                  { ForAStmt($1r,$2,NoAround($2.r),$4) }
  SynchronizedTok ParenExp MaybeDo Stmt                      { SyncAStmt($1r,$2._1,$2._2,$4) }
  SynchronizedTok ExpAssignNP DoTok Stmt                     { SyncAStmt($1r,$2,NoAround($2.r),$4) }
  SynchronizedTok ExpAssignNP Stmt                           { SyncAStmt($1r,$2,NoAround($2.r),$3) }
  TryTok Stmt CatchBlocks Option[FinallyBlock]               { TryAStmt($1r,$2,$3,$4) }
  // TODO: Switch
  LParenTok Stmt Right                                       { ParenAStmt($2,Around(Paren,$1r,$3)) }
AfterIf PreIf
  AfterIfA                                                   { $1 }
  AfterIfB                                                   { $1 }
AfterIfA PreIf
  MaybeParenExp MaybeThen                                    { PreIf(ir => IfAStmt(ir,$1._1,$1._2,HoleAStmt($1._2.r.union($2).after))) }
  ParenExp MaybeThen MaybeStmt ElseTok                       { PreIf(ir => IfElseAStmt(ir,$1._1,$1._2,$3,$4r,HoleAStmt($4r.after))) }
  ExpAssignNP ThenTok MaybeStmt ElseTok                      { PreIf(ir => IfElseAStmt(ir,$1,NoAround($1.r),$3,$4r,HoleAStmt($4r.after))) }
AfterIfB PreIf
  ParenExp MaybeThen Stmt                                    { PreIf(ir => IfAStmt(ir,$1._1,$1._2,$3)) }
  ExpAssignNP ThenTok Stmt                                   { PreIf(ir => IfAStmt(ir,$1,NoAround($1.r),$3)) }
  ExpAssignNP Block                                          { PreIf(ir => IfAStmt(ir,$1,NoAround($1.r),$2)) }
  ExpAssignNP                                                { { val er = $1.r; PreIf(ir => IfAStmt(ir,$1,NoAround(er),EmptyAStmt(er.after))) } }
  ExpAssignNP                                                { { val er = $1.r; PreIf(ir => IfElseAStmt(ir,$1,NoAround(er),EmptyAStmt(er.after),er.after,HoleAStmt(er.after))) } }
  ParenExp MaybeThen MaybeStmt ElseTok Stmt                  { PreIf(ir => IfElseAStmt(ir,$1._1,$1._2,$3,$4r,$5)) }
  ParenExp MaybeThen MaybeStmt ElifTok AfterIf               { PreIf(ir => IfElseAStmt(ir,$1._1,$1._2,$3,$4r,$5($4r))) }
  ExpAssignNP ThenTok MaybeStmt ElseTok Stmt                 { PreIf(ir => IfElseAStmt(ir,$1,NoAround($1.r),$3,$4r,$5)) }
  ExpAssignNP ThenTok MaybeStmt ElifTok AfterIf              { PreIf(ir => IfElseAStmt(ir,$1,NoAround($1.r),$3,$4r,$5($4r))) }
VarDecl AVarDecl
  Ident Dims                     { AVarDecl($1.x,$1.r,$2,None) }
  Ident Dims EqTok ExpCommas     { AVarDecl($1.x,$1.r,$2,Some(($3r:SRange,$4))) }
WhileUntil Loc[Boolean]
  WhileTok                                                   { Loc(false,$1r) }
  UntilTok                                                   { Loc(true,$1r) }
MaybeThen Option[SRange]
  ""                                                         { None }
  ThenTok                                                    { Some($1r) }
MaybeDo Option[SRange]
  ""                                                         { None }
  DoTok                                                      { Some($1r) }
ForInfo ForInfo
  Commas0[StmtHelperBS] SemiTok Option[ExpAssign] SemiTok Commas0[ExpAssignNC]  { For($1,$2r,$3,$4r,$5) }
  Juxts0[Mod] Option[Type] Ident Dims ForeachSep ExpAssign                      { Foreach($1,$2,$3.x,$3.r,$4,$5,$6) }
ForeachSep Long
  LtTok MinusTok                                             { ($1r union $2r).raw }
  EqTok                                                      { $1r }
  ColonTok                                                   { $1r }
  InTok                                                      { $1r }
ParenExp (AExp,Around)
  Left ExpAssign Right                                       { ($2,Around($1,$3)) }
MaybeParenExp (AExp,Around)
  ExpAssignNP                                                { /* null */ { val a = NoAround($1.r); filterNoStartsWithParen[(AExp,Around)]($1)((_,a)) } }
  ParenExp                                                   { $1 }
CatchBlocks List[(CatchInfo,AStmt)]
  ""                                                         { Nil }
  CatchBlock CatchBlocks                                     { $1 :: $2 }
CatchBlock (CatchInfo,AStmt)
// technically, the catch parameter looks like it can be an array in the spec, but that's useless because arrays are not Throwable, so it cannot.
  CatchTok EllipsisTok MaybeStmt                             { (CatchInfo($1r,Nil,None,None,NoAround($2r),false),$3) }
  CatchTok Left EllipsisTok Right MaybeStmt                  { (CatchInfo($1r,Nil,None,None,Around($2,$4),false),$5) }
  CatchTok Juxts0[Mod] Type Ident MaybeStmt                  { (CatchInfo($1r,$2,Some($3),Some($4),NoAround($2.headOption.map(_.r).getOrElse($3r) union $4r),false),$5) }
  CatchTok Left Juxts0[Mod] Type Ident Right MaybeStmt       { (CatchInfo($1r,$3,Some($4),Some($5),Around($2,$6),false),$7) }
  CatchTok Ident ColonTok Juxts0[Mod] Type MaybeStmt         { (CatchInfo($1r,$4,Some($5),Some($2),NoAround($2r union $5r),true),$6) }
  CatchTok Left Ident ColonTok Juxts0[Mod] Type Right MaybeStmt { (CatchInfo($1r,$5,Some($6),Some($3),Around($2,$7),true),$8) }
FinallyBlock (SRange,AStmt)
  FinallyTok MaybeStmt                                       { ($1r,$2) }

// Expressions, lowest to highest precedence
// Suffixes: NJ is no juxtaposition, NC is no commas, NA is no args, NP is no parens (or commas)
ExpAssign AExp
  ExpCommas                                                 { $1 }
  ExpJuxt AssignOp ExpAssign                                { AssignAExp($2.x,$2.r,$1,$3) }
ExpAssignNC AExp
  ExpBinary                                                 { $1 }
  ExpJuxt AssignOp ExpAssign                                { AssignAExp($2.x,$2.r,$1,$3) }
ExpAssignNP AExp
  ExpBinaryNP                                               { $1 }
  ExpJuxt AssignOp ExpAssign                                { AssignAExp($2.x,$2.r,$1,$3) }

ExpCommas AExp
  ExpBinary                                                 { $1 }
  Commas2[ExpBinary]                                        { ArrayAExp($1,NoAround($1.list.head.r union $1.list.last.r)) }

alias EJ ExpJuxt
alias ExpBinary   ExpCond[ExpJuxt]
alias ExpBinaryNJ ExpCond[ExpWild]
alias ExpBinaryNP ExpCond[ExpJuxtNP]
ExpCond[a] AExp
  ExpOrOr[a]                                                { $1 }
  ExpOrOr[EJ] QuestionTok ExpAssign ColonTok ExpCond[EJ]    { CondAExp($1,$2r,$3,$4r,$5) }
ExpOrOr[a] AExp
  ExpAndAnd[a]                                              { $1 }
  ExpOrOr[EJ] OrOrTok ExpAndAnd[EJ]                         { BinaryAExp(OrOrOp,$2r,$1,$3) }
ExpAndAnd[a] AExp
  ExpOr[a]                                                  { $1 }
  ExpAndAnd[EJ] AndAndTok ExpOr[EJ]                         { BinaryAExp(AndAndOp,$2r,$1,$3) }
ExpOr[a] AExp
  ExpXor[a]                                                 { $1 }
  ExpOr[EJ] OrTok ExpXor[EJ]                                { BinaryAExp(OrOp,$2r,$1,$3) }
ExpXor[a] AExp
  ExpAnd[a]                                                 { $1 }
  ExpXor[EJ] XorTok ExpAnd[EJ]                              { BinaryAExp(XorOp,$2r,$1,$3) }
ExpAnd[a] AExp
  ExpEq[a]                                                  { $1 }
  ExpAnd[EJ] AndTok ExpEq[EJ]                               { BinaryAExp(AndOp,$2r,$1,$3) }
ExpEq[a] AExp
  ExpRel[a]                                                 { $1 }
  ExpEq[EJ] EqEqTok ExpRel[EJ]                              { BinaryAExp(EqOp,$2r,$1,$3) }
  ExpEq[EJ] NeTok ExpRel[EJ]                                { BinaryAExp(NeOp,$2r,$1,$3) }
ExpRel[a] AExp
  ExpShift[a]                                               { $1 }
  ExpRel[EJ] LtTok ExpShift[EJ]                             { BinaryAExp(LtOp,$2r,$1,$3) }
  ExpRel[EJ] GtTok ExpShift[EJ]                             { BinaryAExp(GtOp,$2r,$1,$3) }
  ExpRel[EJ] LeTok ExpShift[EJ]                             { BinaryAExp(LeOp,$2r,$1,$3) }
  ExpRel[EJ] GeTok ExpShift[EJ]                             { BinaryAExp(GeOp,$2r,$1,$3) }
  ExpRel[EJ] InstanceofTok Type                             { InstanceofAExp($1,$2r,$3) }
ExpShift[a] AExp
  ExpAdd[a]                                                 { $1 }
  ExpShift[EJ] LShiftTok ExpAdd[EJ]                         { BinaryAExp(LShiftOp,$2r,$1,$3) }
  ExpShift[EJ] GtTok RShiftSepTok GtTok ExpAdd[EJ]          { BinaryAExp(RShiftOp,$2r union $4r,$1,$5) }
  ExpShift[EJ] GtTok UnsignedRShiftSepTok GtTok UnsignedRShiftSepTok GtTok ExpAdd[EJ] { BinaryAExp(UnsignedRShiftOp,$2r union $6r,$1,$7) }
ExpAdd[a] AExp
  ExpMul[a]                                                 { $1 }
  ExpAdd[EJ] PlusTok ExpMul[a]                              { BinaryAExp(AddOp,$2r,$1,$3) }
  ExpAdd[EJ] MinusTok ExpMul[a]                             { BinaryAExp(SubOp,$2r,$1,$3) }
ExpMul[a] AExp
  ExpUnary[a]                                               { $1 }
  ExpMul[EJ] MulTok ExpUnary[a]                             { BinaryAExp(MulOp,$2r,$1,$3) }
  ExpMul[EJ] DivTok ExpUnary[a]                             { BinaryAExp(DivOp,$2r,$1,$3) }
  ExpMul[EJ] ModTok ExpUnary[a]                             { BinaryAExp(ModOp,$2r,$1,$3) }
ExpUnary[a] AExp
  a                                                         { $1 }
  ExpUnary[EJ] PostOp                                       { UnaryAExp($2.x,$2.r,$1) }
  PreOp ExpUnary[EJ]                                        { UnaryAExp($1.x,$1.r,$2) }
  LParenTok Type Right ExpUnary[EJ]                         { CastAExp($2,Around(Paren,$1r,$3),$4) }

ExpJuxt AExp
  ExpWild                                                   { $1 }
  ExpWild SingleJuxt1[ExpWildNA]                            { /* null */ { val a = NoAround($2.list.head.r union $2.list.last.r); filterJuxtApply($1,$2)(ApplyAExp($1,_,a)) } }
ExpJuxtNP AExp
  ExpWildNP                                                 { $1 }
  ExpWild SingleJuxt1[ExpWildNA]                            { /* null */ { val a = NoAround($2.list.head.r union $2.list.last.r); filterJuxtApply($1,$2)(ApplyAExp($1,_,a)) } }

ExpWild AExp
  ExpHigh                                                   { $1 }
  QuestionTok WildcardBounds                                { WildAExp($1r,$2) }
ExpWildNA AExp
  ExpHighNA                                                 { $1 }
  QuestionTok WildcardBounds                                { WildAExp($1r,$2) }
ExpWildNP AExp
  ExpHighNP                                                 { $1 }
  QuestionTok WildcardBounds                                { WildAExp($1r,$2) }

ExpHigh AExp
  ExpParens                                                 { $1 }
  ExpHighNP                                                 { $1 }
ExpHighNP AExp
  ExpHighNA                                                 { $1 }
  LeftNP ArrayInterior Right                                { ArrayAExp($2,Around($1,$3)) }
ExpParens AExp
  LParenTok ExpAssignNC Right                               { ParenAExp($2,Around(Paren,$1r,$3)) }
  LParenTok ArrayInteriorN1 Right                           { ArrayAExp($2,Around(Paren,$1r,$3)) }
ArrayInterior KList[AExp]
  ExpBinaryNJ                                               { SingleList($1) }
  ArrayInteriorN1                                           { $1 }
ArrayInteriorN1 KList[AExp]
  ""                                                        { EmptyList }
  Commas2[ExpBinary]                                        { $1 }
  Juxts2[ExpWild]                                           { JuxtList2($1) }
ExpHighNA AExp
  ExpNew                                                    { $1 }
  ExpHigh Left List[ExpAssignNC] Right                      { /* null */ filterApplyArgs($3)(ApplyAExp($1,_,Around($2,$4))) }
ExpNew AExp
  ExpPrimary                                                { $1 }
  TypeArgs ExpPrimary                                       { TypeApplyAExp($2,$1.x,$1.a,after=false) }
  NewTok Option[TypeArgs] ExpPrimary DimExps                { NewAExp(None,$1r,$2,$3,$4) }
ExpPrimary AExp
  Lit                                                       { $1 }
  Ident                                                     { NameAExp($1.x,$1.r) }
  ExpHigh DotTok Option[TypeArgs] Ident                     { FieldAExp($1,$2r,$3,$4.x,$4.r) }
  ExpHigh DotTok NewTok Option[TypeArgs] ExpPrimary DimExps { NewAExp(Some($1),$3r,$4,$5,$6) }
  ExpHigh TypeArgs                                          { TypeApplyAExp($1,$2.x,$2.a,after=true) }
  ExpNew ClassBody                                          { AAnonClassExp($1,Nil,NoAround($1.after),$2) }
  ExpNew Left List[ExpAssignNC] Right ClassBody             { filterApplyArgs($3)(AAnonClassExp($1,_,Around($2,$4),$5)) }

// TODO LambdaExp

// TODO: ExpHigh ColonColonTok Option[TypeArgs] Ident       { MethodRefAExp($1,$3,$4,$r) }
// TODO: ExpHigh ColonColonTok Option[TypeArgs] NewTok      { NewRefAExp($1,$3,$r) }

Left Loc[Group]
  LParenTok { Loc(Paren,$r) }
  LBrackTok { Loc(Brack,$r) }
  LCurlyTok { Loc(Curly,$r) }
Right Loc[Group]
  RightAnyTok { Loc(AnyGroup,$r) }
  RParenTok   { Loc(Paren,$r) }
  RBrackTok   { Loc(Brack,$r) }
  RCurlyTok   { Loc(Curly,$r) }
LeftNP Loc[Group]
  LBrackTok { Loc(Brack,$r) }
  LCurlyTok { Loc(Curly,$r) }

Lit ALit
  IntLitTok     { IntALit($1.s,$r) }
  LongLitTok    { LongALit($1.s,$r) }
  FloatLitTok   { FloatALit($1.s,$r) }
  DoubleLitTok  { DoubleALit($1.s,$r) }
  CharLitTok    { CharALit($1.s,$r) }
  StringLitTok  { StringALit($1.s,$r) }

PostOp Loc[UnaryOp]
  PlusPlusTok    { Loc(PostIncOp,$r) }
  MinusMinusTok  { Loc(PostDecOp,$r) }

PreOp Loc[UnaryOp]
  PlusPlusTok    { Loc(PreIncOp,$r) }
  MinusMinusTok  { Loc(PreDecOp,$r) }
  PlusTok        { Loc(PosOp,$r) }
  MinusTok       { Loc(NegOp,$r) }
  CompTok        { Loc(CompOp,$r) }
  NotTok         { Loc(NotOp,$r) }

AssignOp Loc[Option[AssignOp]]
  EqTok                { Loc(None,$r) }
  MulEqTok             { Loc(Some(MulOp),$r) }
  DivEqTok             { Loc(Some(DivOp),$r) }
  ModEqTok             { Loc(Some(ModOp),$r) }
  PlusEqTok            { Loc(Some(AddOp),$r) }
  MinusEqTok           { Loc(Some(SubOp),$r) }
  LShiftEqTok          { Loc(Some(LShiftOp),$r) }
  RShiftEqTok          { Loc(Some(RShiftOp),$r) }
  UnsignedRShiftEqTok  { Loc(Some(UnsignedRShiftOp),$r) }
  AndEqTok             { Loc(Some(AndOp),$r) }
  XorEqTok             { Loc(Some(XorOp),$r) }
  OrEqTok              { Loc(Some(OrOp),$r) }