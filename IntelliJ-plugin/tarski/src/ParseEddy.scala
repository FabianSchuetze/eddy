// Autogenerated by ambiguity.  DO NOT EDIT!
package tarski
import tarski.Tokens._
import tarski.AST._
import tarski.Types._

object ParseEddy {
  def parse(input: List[Token]): List[List[AStmt]] = {
    type R = (Int,Int)
    import scala.collection.mutable
    val debug = false
    
    // Functions for matching tokens
    val array = input.toArray
    def tok(i: Int) = array(i)
    def P_PlusEqTok(i: Int) = array(i) match { case t: PlusEqTok => List(t); case _ => Nil }
    def P_LongTok(i: Int) = array(i) match { case t: LongTok => List(t); case _ => Nil }
    def P_OrTok(i: Int) = array(i) match { case t: OrTok => List(t); case _ => Nil }
    def P_SynchronizedTok(i: Int) = array(i) match { case t: SynchronizedTok => List(t); case _ => Nil }
    def P_UntilTok(i: Int) = array(i) match { case t: UntilTok => List(t); case _ => Nil }
    def P_ModTok(i: Int) = array(i) match { case t: ModTok => List(t); case _ => Nil }
    def P_CommaTok(i: Int) = array(i) match { case t: CommaTok => List(t); case _ => Nil }
    def P_InTok(i: Int) = array(i) match { case t: InTok => List(t); case _ => Nil }
    def P_SuperTok(i: Int) = array(i) match { case t: SuperTok => List(t); case _ => Nil }
    def P_DoubleTok(i: Int) = array(i) match { case t: DoubleTok => List(t); case _ => Nil }
    def P_CompTok(i: Int) = array(i) match { case t: CompTok => List(t); case _ => Nil }
    def P_AbstractTok(i: Int) = array(i) match { case t: AbstractTok => List(t); case _ => Nil }
    def P_ProtectedTok(i: Int) = array(i) match { case t: ProtectedTok => List(t); case _ => Nil }
    def P_StringLitTok(i: Int) = array(i) match { case t: StringLitTok => List(t); case _ => Nil }
    def P_DotTok(i: Int) = array(i) match { case t: DotTok => List(t); case _ => Nil }
    def P_NotTok(i: Int) = array(i) match { case t: NotTok => List(t); case _ => Nil }
    def P_ColonTok(i: Int) = array(i) match { case t: ColonTok => List(t); case _ => Nil }
    def P_InstanceofTok(i: Int) = array(i) match { case t: InstanceofTok => List(t); case _ => Nil }
    def P_ReturnTok(i: Int) = array(i) match { case t: ReturnTok => List(t); case _ => Nil }
    def P_FinalTok(i: Int) = array(i) match { case t: FinalTok => List(t); case _ => Nil }
    def P_FloatLitTok(i: Int) = array(i) match { case t: FloatLitTok => List(t); case _ => Nil }
    def P_UnsignedRShiftTok(i: Int) = array(i) match { case t: UnsignedRShiftTok => List(t); case _ => Nil }
    def P_LeTok(i: Int) = array(i) match { case t: LeTok => List(t); case _ => Nil }
    def P_IdentTok(i: Int) = array(i) match { case t: IdentTok => List(t); case _ => Nil }
    def P_TransientTok(i: Int) = array(i) match { case t: TransientTok => List(t); case _ => Nil }
    def P_UnsignedRShiftEqTok(i: Int) = array(i) match { case t: UnsignedRShiftEqTok => List(t); case _ => Nil }
    def P_LtTok(i: Int) = array(i) match { case t: LtTok => List(t); case _ => Nil }
    def P_IntLitTok(i: Int) = array(i) match { case t: IntLitTok => List(t); case _ => Nil }
    def P_ColonColonTok(i: Int) = array(i) match { case t: ColonColonTok => List(t); case _ => Nil }
    def P_AndAndTok(i: Int) = array(i) match { case t: AndAndTok => List(t); case _ => Nil }
    def P_RShiftEqTok(i: Int) = array(i) match { case t: RShiftEqTok => List(t); case _ => Nil }
    def P_ContinueTok(i: Int) = array(i) match { case t: ContinueTok => List(t); case _ => Nil }
    def P_VolatileTok(i: Int) = array(i) match { case t: VolatileTok => List(t); case _ => Nil }
    def P_RCurlyTok(i: Int) = array(i) match { case t: RCurlyTok => List(t); case _ => Nil }
    def P_NewTok(i: Int) = array(i) match { case t: NewTok => List(t); case _ => Nil }
    def P_IntTok(i: Int) = array(i) match { case t: IntTok => List(t); case _ => Nil }
    def P_CharTok(i: Int) = array(i) match { case t: CharTok => List(t); case _ => Nil }
    def P_LCurlyTok(i: Int) = array(i) match { case t: LCurlyTok => List(t); case _ => Nil }
    def P_XorEqTok(i: Int) = array(i) match { case t: XorEqTok => List(t); case _ => Nil }
    def P_EqTok(i: Int) = array(i) match { case t: EqTok => List(t); case _ => Nil }
    def P_PrivateTok(i: Int) = array(i) match { case t: PrivateTok => List(t); case _ => Nil }
    def P_BreakTok(i: Int) = array(i) match { case t: BreakTok => List(t); case _ => Nil }
    def P_LParenTok(i: Int) = array(i) match { case t: LParenTok => List(t); case _ => Nil }
    def P_WhileTok(i: Int) = array(i) match { case t: WhileTok => List(t); case _ => Nil }
    def P_ByteTok(i: Int) = array(i) match { case t: ByteTok => List(t); case _ => Nil }
    def P_MulTok(i: Int) = array(i) match { case t: MulTok => List(t); case _ => Nil }
    def P_DoTok(i: Int) = array(i) match { case t: DoTok => List(t); case _ => Nil }
    def P_DivTok(i: Int) = array(i) match { case t: DivTok => List(t); case _ => Nil }
    def P_DoubleLitTok(i: Int) = array(i) match { case t: DoubleLitTok => List(t); case _ => Nil }
    def P_PlusPlusTok(i: Int) = array(i) match { case t: PlusPlusTok => List(t); case _ => Nil }
    def P_SemiTok(i: Int) = array(i) match { case t: SemiTok => List(t); case _ => Nil }
    def P_StaticTok(i: Int) = array(i) match { case t: StaticTok => List(t); case _ => Nil }
    def P_LBrackTok(i: Int) = array(i) match { case t: LBrackTok => List(t); case _ => Nil }
    def P_XorTok(i: Int) = array(i) match { case t: XorTok => List(t); case _ => Nil }
    def P_MinusMinusTok(i: Int) = array(i) match { case t: MinusMinusTok => List(t); case _ => Nil }
    def P_RBrackTok(i: Int) = array(i) match { case t: RBrackTok => List(t); case _ => Nil }
    def P_NeTok(i: Int) = array(i) match { case t: NeTok => List(t); case _ => Nil }
    def P_RParenTok(i: Int) = array(i) match { case t: RParenTok => List(t); case _ => Nil }
    def P_IfTok(i: Int) = array(i) match { case t: IfTok => List(t); case _ => Nil }
    def P_AndEqTok(i: Int) = array(i) match { case t: AndEqTok => List(t); case _ => Nil }
    def P_ShortTok(i: Int) = array(i) match { case t: ShortTok => List(t); case _ => Nil }
    def P_CharLitTok(i: Int) = array(i) match { case t: CharLitTok => List(t); case _ => Nil }
    def P_FloatTok(i: Int) = array(i) match { case t: FloatTok => List(t); case _ => Nil }
    def P_MinusEqTok(i: Int) = array(i) match { case t: MinusEqTok => List(t); case _ => Nil }
    def P_ForTok(i: Int) = array(i) match { case t: ForTok => List(t); case _ => Nil }
    def P_GtTok(i: Int) = array(i) match { case t: GtTok => List(t); case _ => Nil }
    def P_VoidTok(i: Int) = array(i) match { case t: VoidTok => List(t); case _ => Nil }
    def P_BoolLitTok(i: Int) = array(i) match { case t: BoolLitTok => List(t); case _ => Nil }
    def P_StrictfpTok(i: Int) = array(i) match { case t: StrictfpTok => List(t); case _ => Nil }
    def P_EqEqTok(i: Int) = array(i) match { case t: EqEqTok => List(t); case _ => Nil }
    def P_ExtendsTok(i: Int) = array(i) match { case t: ExtendsTok => List(t); case _ => Nil }
    def P_GeTok(i: Int) = array(i) match { case t: GeTok => List(t); case _ => Nil }
    def P_ThrowTok(i: Int) = array(i) match { case t: ThrowTok => List(t); case _ => Nil }
    def P_NullLitTok(i: Int) = array(i) match { case t: NullLitTok => List(t); case _ => Nil }
    def P_ElseTok(i: Int) = array(i) match { case t: ElseTok => List(t); case _ => Nil }
    def P_ThenTok(i: Int) = array(i) match { case t: ThenTok => List(t); case _ => Nil }
    def P_QuestionTok(i: Int) = array(i) match { case t: QuestionTok => List(t); case _ => Nil }
    def P_AssertTok(i: Int) = array(i) match { case t: AssertTok => List(t); case _ => Nil }
    def P_AndTok(i: Int) = array(i) match { case t: AndTok => List(t); case _ => Nil }
    def P_RShiftTok(i: Int) = array(i) match { case t: RShiftTok => List(t); case _ => Nil }
    def P_OrEqTok(i: Int) = array(i) match { case t: OrEqTok => List(t); case _ => Nil }
    def P_LShiftEqTok(i: Int) = array(i) match { case t: LShiftEqTok => List(t); case _ => Nil }
    def P_LShiftTok(i: Int) = array(i) match { case t: LShiftTok => List(t); case _ => Nil }
    def P_ModEqTok(i: Int) = array(i) match { case t: ModEqTok => List(t); case _ => Nil }
    def P_PlusTok(i: Int) = array(i) match { case t: PlusTok => List(t); case _ => Nil }
    def P_OrOrTok(i: Int) = array(i) match { case t: OrOrTok => List(t); case _ => Nil }
    def P_LongLitTok(i: Int) = array(i) match { case t: LongLitTok => List(t); case _ => Nil }
    def P_AtTok(i: Int) = array(i) match { case t: AtTok => List(t); case _ => Nil }
    def P_MulEqTok(i: Int) = array(i) match { case t: MulEqTok => List(t); case _ => Nil }
    def P_PublicTok(i: Int) = array(i) match { case t: PublicTok => List(t); case _ => Nil }
    def P_MinusTok(i: Int) = array(i) match { case t: MinusTok => List(t); case _ => Nil }
    def P_DivEqTok(i: Int) = array(i) match { case t: DivEqTok => List(t); case _ => Nil }
    
    // Allocate one sparse array per nonterminal
    val P_Commas2_ExpAssignNC = mutable.Map[R,List[List[AExp]]]()
    val P_ModTok__ExpUnary_ExpJuxt = mutable.Map[R,List[(ModTok,AExp)]]()
    val P_ForInfo = mutable.Map[R,List[AStmt=>AStmt]]()
    val P_IfTok__ExpAssignNP = mutable.Map[R,List[(IfTok,AExp)]]()
    val P_ExpHigh__LCurlyTok = mutable.Map[R,List[(AExp,LCurlyTok)]]()
    val P_RShiftTok__ExpAdd_ExpJuxt = mutable.Map[R,List[(RShiftTok,AExp)]]()
    val P_Stmts__RCurlyTok = mutable.Map[R,List[(List[AStmt],RCurlyTok)]]()
    val P_Juxts2_ExpNew__RBrackTok = mutable.Map[R,List[(List[AExp],RBrackTok)]]()
    val P_SemiTok__Stmts = mutable.Map[R,List[(SemiTok,List[AStmt])]]()
    val P_OrOrTok__ExpAndAnd_ExpJuxt = mutable.Map[R,List[(OrOrTok,AExp)]]()
    val P_ForInfo__RParenTok = mutable.Map[R,List[(AStmt=>AStmt,RParenTok)]]()
    val P_Type__List1_VarDecl = mutable.Map[R,List[(AType,KList[(Name,Int,Option[AExp])])]]()
    val P_DivTok__ExpUnary_ExpJuxtNP = mutable.Map[R,List[(DivTok,AExp)]]()
    val P_List_Type__GtTok = mutable.Map[R,List[(KList[AType],GtTok)]]()
    val P_Juxts2_ExpAssignNC = mutable.Map[R,List[List[AExp]]]()
    val P_LShiftTok__ExpAdd_ExpJuxt = mutable.Map[R,List[(LShiftTok,AExp)]]()
    val P_PlusTok__ExpMul_ExpNew = mutable.Map[R,List[(PlusTok,AExp)]]()
    val P_DivTok__ExpUnary_ExpNew = mutable.Map[R,List[(DivTok,AExp)]]()
    val P_AssertTok__ExpJuxt = mutable.Map[R,List[(AssertTok,AExp)]]()
    val P_EqEqTok__ExpRel_ExpJuxt = mutable.Map[R,List[(EqEqTok,AExp)]]()
    val P_AssignOp = mutable.Map[R,List[Option[AssignOp]]]()
    val P_ForeachSep__ExpAssign = mutable.Map[R,List[(Unit,AExp)]]()
    val P_DotTok__Ident = mutable.Map[R,List[(DotTok,Name)]]()
    val P_WildcardBounds = mutable.Map[R,List[Option[(Bound,AType)]]]()
    val P_Option_ThenTok = mutable.Map[R,List[Option[ThenTok]]]()
    val P_ColonTok__ExpCond_ExpJuxt = mutable.Map[R,List[(ColonTok,AExp)]]()
    val P_PreOp = mutable.Map[R,List[UnaryOp]]()
    val P_IfTok__ParenExp__Option_ThenTok = mutable.Map[R,List[(IfTok,AExp,Option[ThenTok])]]()
    val P_Commas2_ExpCond_ExpJuxt__RParenTok = mutable.Map[R,List[(List[AExp],RParenTok)]]()
    val P_ThenTok__MaybeStmt__ElseTok = mutable.Map[R,List[(ThenTok,AStmt,ElseTok)]]()
    val P_ElseTok__Stmt = mutable.Map[R,List[(ElseTok,AStmt)]]()
    val P_MaybeStmt__ElseTok__Stmt = mutable.Map[R,List[(AStmt,ElseTok,AStmt)]]()
    val P_LtTok__ExpShift_ExpJuxt = mutable.Map[R,List[(LtTok,AExp)]]()
    val P_XorTok__ExpAnd_ExpJuxt = mutable.Map[R,List[(XorTok,AExp)]]()
    val P_AndAndTok__ExpOr_ExpJuxt = mutable.Map[R,List[(AndAndTok,AExp)]]()
    val P_LeTok__ExpShift_ExpJuxt = mutable.Map[R,List[(LeTok,AExp)]]()
    val P_ParenExp = mutable.Map[R,List[AExp]]()
    val P_ParenExp__Option_ThenTok = mutable.Map[R,List[(AExp,Option[ThenTok])]]()
    val P_NeTok__ExpRel_ExpJuxt = mutable.Map[R,List[(NeTok,AExp)]]()
    val P_OrTok__ExpXor_ExpJuxt = mutable.Map[R,List[(OrTok,AExp)]]()
    val P_Juxts2_ExpNew = mutable.Map[R,List[List[AExp]]]()
    val P_Juxts2_ExpNew__RCurlyTok = mutable.Map[R,List[(List[AExp],RCurlyTok)]]()
    val P_IfTok__ParenExp = mutable.Map[R,List[(IfTok,AExp)]]()
    val P_PostOp = mutable.Map[R,List[UnaryOp]]()
    val P_CommaTok__Commas1_VarDecl = mutable.Map[R,List[(CommaTok,List[(Name,Int,Option[AExp])])]]()
    val P_Option_DoTok = mutable.Map[R,List[Option[DoTok]]]()
    val P_AndTok__ExpEq_ExpJuxt = mutable.Map[R,List[(AndTok,AExp)]]()
    val P_MinusTok__ExpMul_ExpJuxt = mutable.Map[R,List[(MinusTok,AExp)]]()
    val P_CommaTok__Commas1_ExpCond_ExpJuxt = mutable.Map[R,List[(CommaTok,List[AExp])]]()
    val P_Commas0_StmtHelperBS__SemiTok = mutable.Map[R,List[(List[AStmt],SemiTok)]]()
    val P_ExpHigh__DotTok = mutable.Map[R,List[(AExp,DotTok)]]()
    val P_Commas2_Type = mutable.Map[R,List[List[AType]]]()
    val P_CommaTok__Commas1_Type = mutable.Map[R,List[(CommaTok,List[AType])]]()
    val P_ModTok__ExpUnary_ExpJuxtNP = mutable.Map[R,List[(ModTok,AExp)]]()
    val P_MinusTok__ExpMul_ExpNew = mutable.Map[R,List[(MinusTok,AExp)]]()
    val P_ForInfo__RParenTok__Stmt = mutable.Map[R,List[(AStmt=>AStmt,RParenTok,AStmt)]]()
    val P_ExpParens = mutable.Map[R,List[AExp]]()
    val P_TypeArgs = mutable.Map[R,List[KList[AType]]]()
    val P_Option_TypeArgs = mutable.Map[R,List[Option[KList[AType]]]]()
    val P_UnsignedRShiftTok__ExpAdd_ExpJuxt = mutable.Map[R,List[(UnsignedRShiftTok,AExp)]]()
    val P_Juxts2_VarDecl = mutable.Map[R,List[List[(Name,Int,Option[AExp])]]]()
    val P_Commas2_ExpCond_ExpJuxt__RBrackTok = mutable.Map[R,List[(List[AExp],RBrackTok)]]()
    val P_PlusTok__ExpMul_ExpJuxtNP = mutable.Map[R,List[(PlusTok,AExp)]]()
    val P_MaybeParenExp__Block = mutable.Map[R,List[(AExp,List[AStmt])]]()
    val P_MulTok__ExpUnary_ExpNew = mutable.Map[R,List[(MulTok,AExp)]]()
    val P_ColonTok__ExpJuxt = mutable.Map[R,List[(ColonTok,AExp)]]()
    val P_ExpCond_ExpNew__RBrackTok = mutable.Map[R,List[(AExp,RBrackTok)]]()
    val P_PrimType = mutable.Map[R,List[PrimType]]()
    val P_Commas2_ExpCond_ExpJuxt__RCurlyTok = mutable.Map[R,List[(List[AExp],RCurlyTok)]]()
    val P_ExpAssignNP__ThenTok = mutable.Map[R,List[(AExp,ThenTok)]]()
    val P_ExpAssign__RParenTok = mutable.Map[R,List[(AExp,RParenTok)]]()
    val P_ExpHigh__LParenTok = mutable.Map[R,List[(AExp,LParenTok)]]()
    val P_MaybeStmt__ElseTok = mutable.Map[R,List[(AStmt,ElseTok)]]()
    val P_Option_ThenTok__MaybeStmt__ElseTok = mutable.Map[R,List[(Option[ThenTok],AStmt,ElseTok)]]()
    val P_WhileUntil = mutable.Map[R,List[Boolean]]()
    val P_Mod = mutable.Map[R,List[Mod]]()
    val P_Juxts1_Mod = mutable.Map[R,List[List[Mod]]]()
    val P_Juxts0_Mod = mutable.Map[R,List[List[Mod]]]()
    val P_List_ExpAssignNC__RCurlyTok = mutable.Map[R,List[(KList[AExp],RCurlyTok)]]()
    val P_SemiTok__Commas0_ExpAssignNC = mutable.Map[R,List[(SemiTok,List[AExp])]]()
    val P_Option_ExpAssign__SemiTok__Commas0_ExpAssignNC = mutable.Map[R,List[(Option[AExp],SemiTok,List[AExp])]]()
    val P_IfTok__ExpAssignNP__ThenTok = mutable.Map[R,List[(IfTok,AExp,ThenTok)]]()
    val P_DoTok__MaybeStmt = mutable.Map[R,List[(DoTok,AStmt)]]()
    val P_LBrackTok__RBrackTok = mutable.Map[R,List[(LBrackTok,RBrackTok)]]()
    val P_RParenTok__Stmt = mutable.Map[R,List[(RParenTok,AStmt)]]()
    val P_EqTok__ExpCommas = mutable.Map[R,List[(EqTok,AExp)]]()
    val P_ExpCond_ExpNew__RCurlyTok = mutable.Map[R,List[(AExp,RCurlyTok)]]()
    val P_ForTok__LParenTok = mutable.Map[R,List[(ForTok,LParenTok)]]()
    val P_Commas2_ExpCond_ExpJuxt = mutable.Map[R,List[List[AExp]]]()
    val P_Juxts2_Type = mutable.Map[R,List[List[AType]]]()
    val P_DivTok__ExpUnary_ExpJuxt = mutable.Map[R,List[(DivTok,AExp)]]()
    val P_LParenTok__Type = mutable.Map[R,List[(LParenTok,AType)]]()
    val P_CommaTok__Commas1_ExpAssignNC = mutable.Map[R,List[(CommaTok,List[AExp])]]()
    val P_PlusTok__ExpMul_ExpJuxt = mutable.Map[R,List[(PlusTok,AExp)]]()
    val P_CommaTok__Commas1_StmtHelperBS = mutable.Map[R,List[(CommaTok,List[AStmt])]]()
    val P_Juxts2_ExpNew__RParenTok = mutable.Map[R,List[(List[AExp],RParenTok)]]()
    val P_List_ExpAssignNC__RParenTok = mutable.Map[R,List[(KList[AExp],RParenTok)]]()
    val P_AssignOp__ExpAssign = mutable.Map[R,List[(Option[AssignOp],AExp)]]()
    val P_MinusTok__ExpMul_ExpJuxtNP = mutable.Map[R,List[(MinusTok,AExp)]]()
    val P_ExpHigh__LBrackTok = mutable.Map[R,List[(AExp,LBrackTok)]]()
    val P_MulTok__ExpUnary_ExpJuxtNP = mutable.Map[R,List[(MulTok,AExp)]]()
    val P_Lit = mutable.Map[R,List[ALit]]()
    val P_DoTok__Stmt = mutable.Map[R,List[(DoTok,AStmt)]]()
    val P_GeTok__ExpShift_ExpJuxt = mutable.Map[R,List[(GeTok,AExp)]]()
    val P_InstanceofTok__Type = mutable.Map[R,List[(InstanceofTok,AType)]]()
    val P_ModTok__ExpUnary_ExpNew = mutable.Map[R,List[(ModTok,AExp)]]()
    val P_ExpAssign__ColonTok__ExpCond_ExpJuxt = mutable.Map[R,List[(AExp,ColonTok,AExp)]]()
    val P_WhileUntil__ParenExp = mutable.Map[R,List[(Boolean,AExp)]]()
    val P_ExpAssignNC__RParenTok = mutable.Map[R,List[(AExp,RParenTok)]]()
    val P_MulTok__ExpUnary_ExpJuxt = mutable.Map[R,List[(MulTok,AExp)]]()
    val P_ExpOrOr_ExpJuxt__QuestionTok = mutable.Map[R,List[(AExp,QuestionTok)]]()
    val P_Block = mutable.Map[R,List[List[AStmt]]]()
    val P_ThenTok__Stmt = mutable.Map[R,List[(ThenTok,AStmt)]]()
    val P_RParenTok__ExpUnary_ExpJuxt = mutable.Map[R,List[(RParenTok,AExp)]]()
    val P_Ident = mutable.Map[R,List[Name]]()
    val P_Type = mutable.Map[R,List[AType]]()
    val P_Juxts1_Type = mutable.Map[R,List[List[AType]]]()
    val P_List1_Type = mutable.Map[R,List[KList[AType]]]()
    val P_List_Type = mutable.Map[R,List[KList[AType]]]()
    val P_Option_Type = mutable.Map[R,List[Option[AType]]]()
    val P_Commas1_Type = mutable.Map[R,List[List[AType]]]()
    val P_IdentDims = mutable.Map[R,List[(Name,Int)]]()
    val P_VarDecl = mutable.Map[R,List[(Name,Int,Option[AExp])]]()
    val P_Commas1_VarDecl = mutable.Map[R,List[List[(Name,Int,Option[AExp])]]]()
    val P_Juxts1_VarDecl = mutable.Map[R,List[List[(Name,Int,Option[AExp])]]]()
    val P_Option_Type__IdentDims = mutable.Map[R,List[(Option[AType],(Name,Int))]]()
    val P_Option_TypeArgs__Ident = mutable.Map[R,List[(Option[KList[AType]],Name)]]()
    val P_Option_Ident = mutable.Map[R,List[Option[Name]]]()
    val P_ExpHighNA = mutable.Map[R,List[AExp]]()
    val P_ExpNewNA = mutable.Map[R,List[AExp]]()
    val P_Juxts1_ExpNewNA = mutable.Map[R,List[List[AExp]]]()
    val P_ExpHighNP = mutable.Map[R,List[AExp]]()
    val P_ExpNewNP = mutable.Map[R,List[AExp]]()
    val P_ExpJuxtNP = mutable.Map[R,List[AExp]]()
    val P_ExpUnary_ExpJuxtNP = mutable.Map[R,List[AExp]]()
    val P_ExpMul_ExpJuxtNP = mutable.Map[R,List[AExp]]()
    val P_ExpAdd_ExpJuxtNP = mutable.Map[R,List[AExp]]()
    val P_ExpShift_ExpJuxtNP = mutable.Map[R,List[AExp]]()
    val P_ExpRel_ExpJuxtNP = mutable.Map[R,List[AExp]]()
    val P_ExpEq_ExpJuxtNP = mutable.Map[R,List[AExp]]()
    val P_ExpAnd_ExpJuxtNP = mutable.Map[R,List[AExp]]()
    val P_ExpXor_ExpJuxtNP = mutable.Map[R,List[AExp]]()
    val P_ExpOr_ExpJuxtNP = mutable.Map[R,List[AExp]]()
    val P_ExpAndAnd_ExpJuxtNP = mutable.Map[R,List[AExp]]()
    val P_ExpOrOr_ExpJuxtNP = mutable.Map[R,List[AExp]]()
    val P_ExpCond_ExpJuxtNP = mutable.Map[R,List[AExp]]()
    val P_ExpAssignNP = mutable.Map[R,List[AExp]]()
    val P_MaybeParenExp = mutable.Map[R,List[AExp]]()
    val P_MaybeParenExp__Option_DoTok = mutable.Map[R,List[(AExp,Option[DoTok])]]()
    val P_MaybeParenExp__Option_ThenTok = mutable.Map[R,List[(AExp,Option[ThenTok])]]()
    val P_ExpHigh = mutable.Map[R,List[AExp]]()
    val P_ExpNew = mutable.Map[R,List[AExp]]()
    val P_ExpJuxt = mutable.Map[R,List[AExp]]()
    val P_Option_ExpJuxt = mutable.Map[R,List[Option[AExp]]]()
    val P_Option_TypeArgs__ExpJuxt = mutable.Map[R,List[(Option[KList[AType]],AExp)]]()
    val P_ExpUnary_ExpJuxt = mutable.Map[R,List[AExp]]()
    val P_ExpMul_ExpJuxt = mutable.Map[R,List[AExp]]()
    val P_ExpAdd_ExpJuxt = mutable.Map[R,List[AExp]]()
    val P_ExpShift_ExpJuxt = mutable.Map[R,List[AExp]]()
    val P_ExpRel_ExpJuxt = mutable.Map[R,List[AExp]]()
    val P_ExpEq_ExpJuxt = mutable.Map[R,List[AExp]]()
    val P_ExpAnd_ExpJuxt = mutable.Map[R,List[AExp]]()
    val P_ExpXor_ExpJuxt = mutable.Map[R,List[AExp]]()
    val P_ExpOr_ExpJuxt = mutable.Map[R,List[AExp]]()
    val P_ExpAndAnd_ExpJuxt = mutable.Map[R,List[AExp]]()
    val P_ExpOrOr_ExpJuxt = mutable.Map[R,List[AExp]]()
    val P_ExpCond_ExpJuxt = mutable.Map[R,List[AExp]]()
    val P_Commas1_ExpCond_ExpJuxt = mutable.Map[R,List[List[AExp]]]()
    val P_ExpCommas = mutable.Map[R,List[AExp]]()
    val P_ExpAssign = mutable.Map[R,List[AExp]]()
    val P_Option_ExpAssign = mutable.Map[R,List[Option[AExp]]]()
    val P_StmtHelperBS = mutable.Map[R,List[AStmt]]()
    val P_StmtHelper = mutable.Map[R,List[AStmt]]()
    val P_Stmts = mutable.Map[R,List[List[AStmt]]]()
    val P_Stmt = mutable.Map[R,List[AStmt]]()
    val P_Option_ThenTok__Stmt = mutable.Map[R,List[(Option[ThenTok],AStmt)]]()
    val P_MaybeStmt = mutable.Map[R,List[AStmt]]()
    val P_Option_DoTok__Stmt = mutable.Map[R,List[(Option[DoTok],AStmt)]]()
    val P_Commas1_StmtHelperBS = mutable.Map[R,List[List[AStmt]]]()
    val P_Commas0_StmtHelperBS = mutable.Map[R,List[List[AStmt]]]()
    val P_ExpAssignNC = mutable.Map[R,List[AExp]]()
    val P_Juxts1_ExpAssignNC = mutable.Map[R,List[List[AExp]]]()
    val P_Commas1_ExpAssignNC = mutable.Map[R,List[List[AExp]]]()
    val P_Commas0_ExpAssignNC = mutable.Map[R,List[List[AExp]]]()
    val P_List1_ExpAssignNC = mutable.Map[R,List[KList[AExp]]]()
    val P_List_ExpAssignNC = mutable.Map[R,List[KList[AExp]]]()
    val P_ExpUnary_ExpNew = mutable.Map[R,List[AExp]]()
    val P_ExpMul_ExpNew = mutable.Map[R,List[AExp]]()
    val P_ExpAdd_ExpNew = mutable.Map[R,List[AExp]]()
    val P_ExpShift_ExpNew = mutable.Map[R,List[AExp]]()
    val P_ExpRel_ExpNew = mutable.Map[R,List[AExp]]()
    val P_ExpEq_ExpNew = mutable.Map[R,List[AExp]]()
    val P_ExpAnd_ExpNew = mutable.Map[R,List[AExp]]()
    val P_ExpXor_ExpNew = mutable.Map[R,List[AExp]]()
    val P_ExpOr_ExpNew = mutable.Map[R,List[AExp]]()
    val P_ExpAndAnd_ExpNew = mutable.Map[R,List[AExp]]()
    val P_ExpOrOr_ExpNew = mutable.Map[R,List[AExp]]()
    val P_ExpCond_ExpNew = mutable.Map[R,List[AExp]]()
    val P_Juxts1_ExpNew = mutable.Map[R,List[List[AExp]]]()
    val P_ForeachSep = mutable.Map[R,List[Unit]]()
    val P_ExpHigh__ColonColonTok = mutable.Map[R,List[(AExp,ColonColonTok)]]()
    val P_Commas2_VarDecl = mutable.Map[R,List[List[(Name,Int,Option[AExp])]]]()
    val P_List1_VarDecl = mutable.Map[R,List[KList[(Name,Int,Option[AExp])]]]()
    val P_WhileUntil__MaybeParenExp = mutable.Map[R,List[(Boolean,AExp)]]()
    val P_ForTok__ForInfo = mutable.Map[R,List[(ForTok,AStmt=>AStmt)]]()
    val P_List_ExpAssignNC__RBrackTok = mutable.Map[R,List[(KList[AExp],RBrackTok)]]()
    val P_GtTok__ExpShift_ExpJuxt = mutable.Map[R,List[(GtTok,AExp)]]()
    val P_WhileUntil__ExpAssignNP = mutable.Map[R,List[(Boolean,AExp)]]()
    val P_Option_TypeArgs__NewTok = mutable.Map[R,List[(Option[KList[AType]],NewTok)]]()
    
    // Parse bottom up for each nonterminal
    val n = input.length
    // Parse null productions
    for (lo <- 0 to n) {
      P_Commas2_ExpAssignNC((lo,lo)) = List()
      P_ModTok__ExpUnary_ExpJuxt((lo,lo)) = List()
      P_ForInfo((lo,lo)) = List()
      P_IfTok__ExpAssignNP((lo,lo)) = List()
      P_ExpHigh__LCurlyTok((lo,lo)) = List()
      P_RShiftTok__ExpAdd_ExpJuxt((lo,lo)) = List()
      P_Stmts__RCurlyTok((lo,lo)) = List()
      P_Juxts2_ExpNew__RBrackTok((lo,lo)) = List()
      P_SemiTok__Stmts((lo,lo)) = List()
      P_OrOrTok__ExpAndAnd_ExpJuxt((lo,lo)) = List()
      P_ForInfo__RParenTok((lo,lo)) = List()
      P_Type__List1_VarDecl((lo,lo)) = List()
      P_DivTok__ExpUnary_ExpJuxtNP((lo,lo)) = List()
      P_List_Type__GtTok((lo,lo)) = List()
      P_Juxts2_ExpAssignNC((lo,lo)) = List()
      P_LShiftTok__ExpAdd_ExpJuxt((lo,lo)) = List()
      P_PlusTok__ExpMul_ExpNew((lo,lo)) = List()
      P_DivTok__ExpUnary_ExpNew((lo,lo)) = List()
      P_AssertTok__ExpJuxt((lo,lo)) = List()
      P_EqEqTok__ExpRel_ExpJuxt((lo,lo)) = List()
      P_AssignOp((lo,lo)) = List()
      P_ForeachSep__ExpAssign((lo,lo)) = List()
      P_DotTok__Ident((lo,lo)) = List()
      P_WildcardBounds((lo,lo)) = List(None)
      P_Option_ThenTok((lo,lo)) = List(None)
      P_ColonTok__ExpCond_ExpJuxt((lo,lo)) = List()
      P_PreOp((lo,lo)) = List()
      P_IfTok__ParenExp__Option_ThenTok((lo,lo)) = List()
      P_Commas2_ExpCond_ExpJuxt__RParenTok((lo,lo)) = List()
      P_ThenTok__MaybeStmt__ElseTok((lo,lo)) = List()
      P_ElseTok__Stmt((lo,lo)) = List()
      P_MaybeStmt__ElseTok__Stmt((lo,lo)) = List()
      P_LtTok__ExpShift_ExpJuxt((lo,lo)) = List()
      P_XorTok__ExpAnd_ExpJuxt((lo,lo)) = List()
      P_AndAndTok__ExpOr_ExpJuxt((lo,lo)) = List()
      P_LeTok__ExpShift_ExpJuxt((lo,lo)) = List()
      P_ParenExp((lo,lo)) = List()
      P_ParenExp__Option_ThenTok((lo,lo)) = List()
      P_NeTok__ExpRel_ExpJuxt((lo,lo)) = List()
      P_OrTok__ExpXor_ExpJuxt((lo,lo)) = List()
      P_Juxts2_ExpNew((lo,lo)) = List()
      P_Juxts2_ExpNew__RCurlyTok((lo,lo)) = List()
      P_IfTok__ParenExp((lo,lo)) = List()
      P_PostOp((lo,lo)) = List()
      P_CommaTok__Commas1_VarDecl((lo,lo)) = List()
      P_Option_DoTok((lo,lo)) = List(None)
      P_AndTok__ExpEq_ExpJuxt((lo,lo)) = List()
      P_MinusTok__ExpMul_ExpJuxt((lo,lo)) = List()
      P_CommaTok__Commas1_ExpCond_ExpJuxt((lo,lo)) = List()
      P_Commas0_StmtHelperBS__SemiTok((lo,lo)) = List()
      P_ExpHigh__DotTok((lo,lo)) = List()
      P_Commas2_Type((lo,lo)) = List()
      P_CommaTok__Commas1_Type((lo,lo)) = List()
      P_ModTok__ExpUnary_ExpJuxtNP((lo,lo)) = List()
      P_MinusTok__ExpMul_ExpNew((lo,lo)) = List()
      P_ForInfo__RParenTok__Stmt((lo,lo)) = List()
      P_ExpParens((lo,lo)) = List()
      P_TypeArgs((lo,lo)) = List()
      P_Option_TypeArgs((lo,lo)) = List(None)
      P_UnsignedRShiftTok__ExpAdd_ExpJuxt((lo,lo)) = List()
      P_Juxts2_VarDecl((lo,lo)) = List()
      P_Commas2_ExpCond_ExpJuxt__RBrackTok((lo,lo)) = List()
      P_PlusTok__ExpMul_ExpJuxtNP((lo,lo)) = List()
      P_MaybeParenExp__Block((lo,lo)) = List()
      P_MulTok__ExpUnary_ExpNew((lo,lo)) = List()
      P_ColonTok__ExpJuxt((lo,lo)) = List()
      P_ExpCond_ExpNew__RBrackTok((lo,lo)) = List()
      P_PrimType((lo,lo)) = List()
      P_Commas2_ExpCond_ExpJuxt__RCurlyTok((lo,lo)) = List()
      P_ExpAssignNP__ThenTok((lo,lo)) = List()
      P_ExpAssign__RParenTok((lo,lo)) = List()
      P_ExpHigh__LParenTok((lo,lo)) = List()
      P_MaybeStmt__ElseTok((lo,lo)) = List()
      P_Option_ThenTok__MaybeStmt__ElseTok((lo,lo)) = List()
      P_WhileUntil((lo,lo)) = List()
      P_Mod((lo,lo)) = List()
      P_Juxts1_Mod((lo,lo)) = List()
      P_Juxts0_Mod((lo,lo)) = List(Nil)
      P_List_ExpAssignNC__RCurlyTok((lo,lo)) = List()
      P_SemiTok__Commas0_ExpAssignNC((lo,lo)) = List()
      P_Option_ExpAssign__SemiTok__Commas0_ExpAssignNC((lo,lo)) = List()
      P_IfTok__ExpAssignNP__ThenTok((lo,lo)) = List()
      P_DoTok__MaybeStmt((lo,lo)) = List()
      P_LBrackTok__RBrackTok((lo,lo)) = List()
      P_RParenTok__Stmt((lo,lo)) = List()
      P_EqTok__ExpCommas((lo,lo)) = List()
      P_ExpCond_ExpNew__RCurlyTok((lo,lo)) = List()
      P_ForTok__LParenTok((lo,lo)) = List()
      P_Commas2_ExpCond_ExpJuxt((lo,lo)) = List()
      P_Juxts2_Type((lo,lo)) = List()
      P_DivTok__ExpUnary_ExpJuxt((lo,lo)) = List()
      P_LParenTok__Type((lo,lo)) = List()
      P_CommaTok__Commas1_ExpAssignNC((lo,lo)) = List()
      P_PlusTok__ExpMul_ExpJuxt((lo,lo)) = List()
      P_CommaTok__Commas1_StmtHelperBS((lo,lo)) = List()
      P_Juxts2_ExpNew__RParenTok((lo,lo)) = List()
      P_List_ExpAssignNC__RParenTok((lo,lo)) = List()
      P_AssignOp__ExpAssign((lo,lo)) = List()
      P_MinusTok__ExpMul_ExpJuxtNP((lo,lo)) = List()
      P_ExpHigh__LBrackTok((lo,lo)) = List()
      P_MulTok__ExpUnary_ExpJuxtNP((lo,lo)) = List()
      P_Lit((lo,lo)) = List()
      P_DoTok__Stmt((lo,lo)) = List()
      P_GeTok__ExpShift_ExpJuxt((lo,lo)) = List()
      P_InstanceofTok__Type((lo,lo)) = List()
      P_ModTok__ExpUnary_ExpNew((lo,lo)) = List()
      P_ExpAssign__ColonTok__ExpCond_ExpJuxt((lo,lo)) = List()
      P_WhileUntil__ParenExp((lo,lo)) = List()
      P_ExpAssignNC__RParenTok((lo,lo)) = List()
      P_MulTok__ExpUnary_ExpJuxt((lo,lo)) = List()
      P_ExpOrOr_ExpJuxt__QuestionTok((lo,lo)) = List()
      P_Block((lo,lo)) = List()
      P_ThenTok__Stmt((lo,lo)) = List()
      P_RParenTok__ExpUnary_ExpJuxt((lo,lo)) = List()
      P_Ident((lo,lo)) = List()
      P_Type((lo,lo)) = List()
      P_Juxts1_Type((lo,lo)) = List()
      P_List1_Type((lo,lo)) = List()
      P_List_Type((lo,lo)) = List(EmptyList)
      P_Option_Type((lo,lo)) = List(None)
      P_Commas1_Type((lo,lo)) = List()
      P_IdentDims((lo,lo)) = List()
      P_VarDecl((lo,lo)) = List()
      P_Commas1_VarDecl((lo,lo)) = List()
      P_Juxts1_VarDecl((lo,lo)) = List()
      P_Option_Type__IdentDims((lo,lo)) = List()
      P_Option_TypeArgs__Ident((lo,lo)) = List()
      P_Option_Ident((lo,lo)) = List(None)
      P_ExpHighNA((lo,lo)) = List()
      P_ExpNewNA((lo,lo)) = List()
      P_Juxts1_ExpNewNA((lo,lo)) = List()
      P_ExpHighNP((lo,lo)) = List()
      P_ExpNewNP((lo,lo)) = List()
      P_ExpJuxtNP((lo,lo)) = List()
      P_ExpUnary_ExpJuxtNP((lo,lo)) = List()
      P_ExpMul_ExpJuxtNP((lo,lo)) = List()
      P_ExpAdd_ExpJuxtNP((lo,lo)) = List()
      P_ExpShift_ExpJuxtNP((lo,lo)) = List()
      P_ExpRel_ExpJuxtNP((lo,lo)) = List()
      P_ExpEq_ExpJuxtNP((lo,lo)) = List()
      P_ExpAnd_ExpJuxtNP((lo,lo)) = List()
      P_ExpXor_ExpJuxtNP((lo,lo)) = List()
      P_ExpOr_ExpJuxtNP((lo,lo)) = List()
      P_ExpAndAnd_ExpJuxtNP((lo,lo)) = List()
      P_ExpOrOr_ExpJuxtNP((lo,lo)) = List()
      P_ExpCond_ExpJuxtNP((lo,lo)) = List()
      P_ExpAssignNP((lo,lo)) = List()
      P_MaybeParenExp((lo,lo)) = List()
      P_MaybeParenExp__Option_DoTok((lo,lo)) = List()
      P_MaybeParenExp__Option_ThenTok((lo,lo)) = List()
      P_ExpHigh((lo,lo)) = List()
      P_ExpNew((lo,lo)) = List()
      P_ExpJuxt((lo,lo)) = List()
      P_Option_ExpJuxt((lo,lo)) = List(None)
      P_Option_TypeArgs__ExpJuxt((lo,lo)) = List()
      P_ExpUnary_ExpJuxt((lo,lo)) = List()
      P_ExpMul_ExpJuxt((lo,lo)) = List()
      P_ExpAdd_ExpJuxt((lo,lo)) = List()
      P_ExpShift_ExpJuxt((lo,lo)) = List()
      P_ExpRel_ExpJuxt((lo,lo)) = List()
      P_ExpEq_ExpJuxt((lo,lo)) = List()
      P_ExpAnd_ExpJuxt((lo,lo)) = List()
      P_ExpXor_ExpJuxt((lo,lo)) = List()
      P_ExpOr_ExpJuxt((lo,lo)) = List()
      P_ExpAndAnd_ExpJuxt((lo,lo)) = List()
      P_ExpOrOr_ExpJuxt((lo,lo)) = List()
      P_ExpCond_ExpJuxt((lo,lo)) = List()
      P_Commas1_ExpCond_ExpJuxt((lo,lo)) = List()
      P_ExpCommas((lo,lo)) = List()
      P_ExpAssign((lo,lo)) = List()
      P_Option_ExpAssign((lo,lo)) = List(None)
      P_StmtHelperBS((lo,lo)) = List()
      P_StmtHelper((lo,lo)) = List()
      P_Stmts((lo,lo)) = List(Nil)
      P_Stmt((lo,lo)) = List()
      P_Option_ThenTok__Stmt((lo,lo)) = List()
      P_MaybeStmt((lo,lo)) = List(HoleAStmt())
      P_Option_DoTok__Stmt((lo,lo)) = List()
      P_Commas1_StmtHelperBS((lo,lo)) = List()
      P_Commas0_StmtHelperBS((lo,lo)) = List(Nil)
      P_ExpAssignNC((lo,lo)) = List()
      P_Juxts1_ExpAssignNC((lo,lo)) = List()
      P_Commas1_ExpAssignNC((lo,lo)) = List()
      P_Commas0_ExpAssignNC((lo,lo)) = List(Nil)
      P_List1_ExpAssignNC((lo,lo)) = List()
      P_List_ExpAssignNC((lo,lo)) = List(EmptyList)
      P_ExpUnary_ExpNew((lo,lo)) = List()
      P_ExpMul_ExpNew((lo,lo)) = List()
      P_ExpAdd_ExpNew((lo,lo)) = List()
      P_ExpShift_ExpNew((lo,lo)) = List()
      P_ExpRel_ExpNew((lo,lo)) = List()
      P_ExpEq_ExpNew((lo,lo)) = List()
      P_ExpAnd_ExpNew((lo,lo)) = List()
      P_ExpXor_ExpNew((lo,lo)) = List()
      P_ExpOr_ExpNew((lo,lo)) = List()
      P_ExpAndAnd_ExpNew((lo,lo)) = List()
      P_ExpOrOr_ExpNew((lo,lo)) = List()
      P_ExpCond_ExpNew((lo,lo)) = List()
      P_Juxts1_ExpNew((lo,lo)) = List()
      P_ForeachSep((lo,lo)) = List()
      P_ExpHigh__ColonColonTok((lo,lo)) = List()
      P_Commas2_VarDecl((lo,lo)) = List()
      P_List1_VarDecl((lo,lo)) = List()
      P_WhileUntil__MaybeParenExp((lo,lo)) = List()
      P_ForTok__ForInfo((lo,lo)) = List()
      P_List_ExpAssignNC__RBrackTok((lo,lo)) = List()
      P_GtTok__ExpShift_ExpJuxt((lo,lo)) = List()
      P_WhileUntil__ExpAssignNP((lo,lo)) = List()
      P_Option_TypeArgs__NewTok((lo,lo)) = List()
    }
    // Parse nonnull productions
    for (lo <- n to 0 by -1; hi <- lo+1 to n) {
      if (debug) println("\nparsing: "+array.slice(lo,hi).mkString(" "))
      def d[A](non: String, p: mutable.Map[R,List[A]]) = if (debug) {
        val c = p((lo,hi)); val n = c.size
        if (n>0) println(s"  $non $n = "+c.mkString(" "))
      }
      def t[A,C](p: Int => List[A])(f: A => C) = if (lo+1==hi) p(lo).map(f) else Nil
      def n[A,C](p: R   => List[A])(f: A => C) = p(lo,hi).map(f)
      def s[A,C](p: R   => List[A])(f: A => C) = if (lo<hi) p(lo,hi).map(f) else Nil
      def tt[A,B,C](pa: Int => List[A], pb: Int => List[B])(f: (A,B) => C) = if (lo+2==hi) for (a <- pa(lo); b <- pb(lo+1)) yield f(a,b) else Nil
      def tn[A,B,C](pa: Int => List[A], pb: R   => List[B])(f: (A,B) => C) = if (lo<hi) for (a <- pa(lo); b <- pb((lo+1,hi))) yield f(a,b) else Nil
      def ts[A,B,C](pa: Int => List[A], pb: R   => List[B])(f: (A,B) => C) = if (lo+1<hi) for (a <- pa(lo); b <- pb((lo+1,hi))) yield f(a,b) else Nil
      def nt[A,B,C](pa: R   => List[A], pb: Int => List[B])(f: (A,B) => C) = if (lo<hi) for (b <- pb(hi-1); a <- pa((lo,hi-1))) yield f(a,b) else Nil
      def st[A,B,C](pa: R   => List[A], pb: Int => List[B])(f: (A,B) => C) = if (lo+1<hi) for (b <- pb(hi-1); a <- pa((lo,hi-1))) yield f(a,b) else Nil
      def nn[A,B,C](pa: R   => List[A], pb: R   => List[B])(f: (A,B) => C) = (for (m <- lo to hi; a <- pa((lo,m)); b <- pb((m,hi))) yield f(a,b)).toList
      def sn[A,B,C](pa: R   => List[A], pb: R   => List[B])(f: (A,B) => C) = (for (m <- lo+1 to hi; a <- pa((lo,m)); b <- pb((m,hi))) yield f(a,b)).toList
      def ns[A,B,C](pa: R   => List[A], pb: R   => List[B])(f: (A,B) => C) = (for (m <- lo to hi-1; a <- pa((lo,m)); b <- pb((m,hi))) yield f(a,b)).toList
      def ss[A,B,C](pa: R   => List[A], pb: R   => List[B])(f: (A,B) => C) = (for (m <- lo+1 to hi-1; a <- pa((lo,m)); b <- pb((m,hi))) yield f(a,b)).toList
      P_Commas2_ExpAssignNC((lo,hi)) = ss(P_ExpAssignNC,P_CommaTok__Commas1_ExpAssignNC)((x,y) => x :: y._2); d("Commas2_ExpAssignNC",P_Commas2_ExpAssignNC)
      P_ModTok__ExpUnary_ExpJuxt((lo,hi)) = ts(P_ModTok,P_ExpUnary_ExpJuxt)((x,y) => (x,y)); d("ModTok__ExpUnary_ExpJuxt",P_ModTok__ExpUnary_ExpJuxt)
      P_ForInfo((lo,hi)) = ss(P_Commas0_StmtHelperBS__SemiTok,P_Option_ExpAssign__SemiTok__Commas0_ExpAssignNC)((x,y) => (s: AStmt) => ForAStmt(x._1,y._1,y._3,s)) ::: ss(P_Option_Type__IdentDims,P_ForeachSep__ExpAssign)((x,y) => (s: AStmt) => ForeachAStmt(x._1,x._2._1,x._2._2,y._2,s)); d("ForInfo",P_ForInfo)
      P_IfTok__ExpAssignNP((lo,hi)) = ts(P_IfTok,P_ExpAssignNP)((x,y) => (x,y)); d("IfTok__ExpAssignNP",P_IfTok__ExpAssignNP)
      P_ExpHigh__LCurlyTok((lo,hi)) = st(P_ExpHigh,P_LCurlyTok)((x,y) => (x,y)); d("ExpHigh__LCurlyTok",P_ExpHigh__LCurlyTok)
      P_RShiftTok__ExpAdd_ExpJuxt((lo,hi)) = ts(P_RShiftTok,P_ExpAdd_ExpJuxt)((x,y) => (x,y)); d("RShiftTok__ExpAdd_ExpJuxt",P_RShiftTok__ExpAdd_ExpJuxt)
      P_Stmts__RCurlyTok((lo,hi)) = nt(P_Stmts,P_RCurlyTok)((x,y) => (x,y)); d("Stmts__RCurlyTok",P_Stmts__RCurlyTok)
      P_Juxts2_ExpNew__RBrackTok((lo,hi)) = st(P_Juxts2_ExpNew,P_RBrackTok)((x,y) => (x,y)); d("Juxts2_ExpNew__RBrackTok",P_Juxts2_ExpNew__RBrackTok)
      P_SemiTok__Stmts((lo,hi)) = tn(P_SemiTok,P_Stmts)((x,y) => (x,y)); d("SemiTok__Stmts",P_SemiTok__Stmts)
      P_OrOrTok__ExpAndAnd_ExpJuxt((lo,hi)) = ts(P_OrOrTok,P_ExpAndAnd_ExpJuxt)((x,y) => (x,y)); d("OrOrTok__ExpAndAnd_ExpJuxt",P_OrOrTok__ExpAndAnd_ExpJuxt)
      P_ForInfo__RParenTok((lo,hi)) = st(P_ForInfo,P_RParenTok)((x,y) => (x,y)); d("ForInfo__RParenTok",P_ForInfo__RParenTok)
      P_Type__List1_VarDecl((lo,hi)) = ss(P_Type,P_List1_VarDecl)((x,y) => (x,y)); d("Type__List1_VarDecl",P_Type__List1_VarDecl)
      P_DivTok__ExpUnary_ExpJuxtNP((lo,hi)) = ts(P_DivTok,P_ExpUnary_ExpJuxtNP)((x,y) => (x,y)); d("DivTok__ExpUnary_ExpJuxtNP",P_DivTok__ExpUnary_ExpJuxtNP)
      P_List_Type__GtTok((lo,hi)) = nt(P_List_Type,P_GtTok)((x,y) => (x,y)); d("List_Type__GtTok",P_List_Type__GtTok)
      P_Juxts2_ExpAssignNC((lo,hi)) = ss(P_ExpAssignNC,P_Juxts1_ExpAssignNC)((x,y) => x :: y); d("Juxts2_ExpAssignNC",P_Juxts2_ExpAssignNC)
      P_LShiftTok__ExpAdd_ExpJuxt((lo,hi)) = ts(P_LShiftTok,P_ExpAdd_ExpJuxt)((x,y) => (x,y)); d("LShiftTok__ExpAdd_ExpJuxt",P_LShiftTok__ExpAdd_ExpJuxt)
      P_PlusTok__ExpMul_ExpNew((lo,hi)) = ts(P_PlusTok,P_ExpMul_ExpNew)((x,y) => (x,y)); d("PlusTok__ExpMul_ExpNew",P_PlusTok__ExpMul_ExpNew)
      P_DivTok__ExpUnary_ExpNew((lo,hi)) = ts(P_DivTok,P_ExpUnary_ExpNew)((x,y) => (x,y)); d("DivTok__ExpUnary_ExpNew",P_DivTok__ExpUnary_ExpNew)
      P_AssertTok__ExpJuxt((lo,hi)) = ts(P_AssertTok,P_ExpJuxt)((x,y) => (x,y)); d("AssertTok__ExpJuxt",P_AssertTok__ExpJuxt)
      P_EqEqTok__ExpRel_ExpJuxt((lo,hi)) = ts(P_EqEqTok,P_ExpRel_ExpJuxt)((x,y) => (x,y)); d("EqEqTok__ExpRel_ExpJuxt",P_EqEqTok__ExpRel_ExpJuxt)
      P_AssignOp((lo,hi)) = t(P_LShiftEqTok)(x => Some(LShiftOp)) ::: t(P_ModEqTok)(x => Some(ModOp)) ::: t(P_MinusEqTok)(x => Some(SubOp)) ::: t(P_EqTok)(x => None) ::: t(P_RShiftEqTok)(x => Some(RShiftOp)) ::: t(P_UnsignedRShiftEqTok)(x => Some(UnsignedRShiftOp)) ::: t(P_PlusEqTok)(x => Some(AddOp)) ::: t(P_DivEqTok)(x => Some(DivOp)) ::: t(P_AndEqTok)(x => Some(AndOp)) ::: t(P_OrEqTok)(x => Some(OrOp)) ::: t(P_XorEqTok)(x => Some(XorOp)) ::: t(P_MulEqTok)(x => Some(MulOp)); d("AssignOp",P_AssignOp)
      P_ForeachSep__ExpAssign((lo,hi)) = ss(P_ForeachSep,P_ExpAssign)((x,y) => (x,y)); d("ForeachSep__ExpAssign",P_ForeachSep__ExpAssign)
      P_DotTok__Ident((lo,hi)) = ts(P_DotTok,P_Ident)((x,y) => (x,y)); d("DotTok__Ident",P_DotTok__Ident)
      P_WildcardBounds((lo,hi)) = ts(P_ExtendsTok,P_Type)((x,y) => Some((Extends(),y))) ::: ts(P_ColonTok,P_Type)((x,y) => Some((Extends(),y))) ::: ts(P_SuperTok,P_Type)((x,y) => Some((Super(),y))); d("WildcardBounds",P_WildcardBounds)
      P_Option_ThenTok((lo,hi)) = t(P_ThenTok)(x => Some(x)); d("Option_ThenTok",P_Option_ThenTok)
      P_ColonTok__ExpCond_ExpJuxt((lo,hi)) = ts(P_ColonTok,P_ExpCond_ExpJuxt)((x,y) => (x,y)); d("ColonTok__ExpCond_ExpJuxt",P_ColonTok__ExpCond_ExpJuxt)
      P_PreOp((lo,hi)) = t(P_MinusTok)(x => NegOp) ::: t(P_CompTok)(x => CompOp) ::: t(P_PlusTok)(x => PosOp) ::: t(P_PlusPlusTok)(x => PreIncOp) ::: t(P_NotTok)(x => NotOp) ::: t(P_MinusMinusTok)(x => PreDecOp); d("PreOp",P_PreOp)
      P_IfTok__ParenExp__Option_ThenTok((lo,hi)) = ts(P_IfTok,P_ParenExp__Option_ThenTok)((x,y) => (x,y._1,y._2)); d("IfTok__ParenExp__Option_ThenTok",P_IfTok__ParenExp__Option_ThenTok)
      P_Commas2_ExpCond_ExpJuxt__RParenTok((lo,hi)) = st(P_Commas2_ExpCond_ExpJuxt,P_RParenTok)((x,y) => (x,y)); d("Commas2_ExpCond_ExpJuxt__RParenTok",P_Commas2_ExpCond_ExpJuxt__RParenTok)
      P_ThenTok__MaybeStmt__ElseTok((lo,hi)) = ts(P_ThenTok,P_MaybeStmt__ElseTok)((x,y) => (x,y._1,y._2)); d("ThenTok__MaybeStmt__ElseTok",P_ThenTok__MaybeStmt__ElseTok)
      P_ElseTok__Stmt((lo,hi)) = ts(P_ElseTok,P_Stmt)((x,y) => (x,y)); d("ElseTok__Stmt",P_ElseTok__Stmt)
      P_MaybeStmt__ElseTok__Stmt((lo,hi)) = ns(P_MaybeStmt,P_ElseTok__Stmt)((x,y) => (x,y._1,y._2)); d("MaybeStmt__ElseTok__Stmt",P_MaybeStmt__ElseTok__Stmt)
      P_LtTok__ExpShift_ExpJuxt((lo,hi)) = ts(P_LtTok,P_ExpShift_ExpJuxt)((x,y) => (x,y)); d("LtTok__ExpShift_ExpJuxt",P_LtTok__ExpShift_ExpJuxt)
      P_XorTok__ExpAnd_ExpJuxt((lo,hi)) = ts(P_XorTok,P_ExpAnd_ExpJuxt)((x,y) => (x,y)); d("XorTok__ExpAnd_ExpJuxt",P_XorTok__ExpAnd_ExpJuxt)
      P_AndAndTok__ExpOr_ExpJuxt((lo,hi)) = ts(P_AndAndTok,P_ExpOr_ExpJuxt)((x,y) => (x,y)); d("AndAndTok__ExpOr_ExpJuxt",P_AndAndTok__ExpOr_ExpJuxt)
      P_LeTok__ExpShift_ExpJuxt((lo,hi)) = ts(P_LeTok,P_ExpShift_ExpJuxt)((x,y) => (x,y)); d("LeTok__ExpShift_ExpJuxt",P_LeTok__ExpShift_ExpJuxt)
      P_ParenExp((lo,hi)) = ts(P_LParenTok,P_ExpAssign__RParenTok)((x,y) => y._1); d("ParenExp",P_ParenExp)
      P_ParenExp__Option_ThenTok((lo,hi)) = sn(P_ParenExp,P_Option_ThenTok)((x,y) => (x,y)); d("ParenExp__Option_ThenTok",P_ParenExp__Option_ThenTok)
      P_NeTok__ExpRel_ExpJuxt((lo,hi)) = ts(P_NeTok,P_ExpRel_ExpJuxt)((x,y) => (x,y)); d("NeTok__ExpRel_ExpJuxt",P_NeTok__ExpRel_ExpJuxt)
      P_OrTok__ExpXor_ExpJuxt((lo,hi)) = ts(P_OrTok,P_ExpXor_ExpJuxt)((x,y) => (x,y)); d("OrTok__ExpXor_ExpJuxt",P_OrTok__ExpXor_ExpJuxt)
      P_Juxts2_ExpNew((lo,hi)) = ss(P_ExpNew,P_Juxts1_ExpNew)((x,y) => x :: y); d("Juxts2_ExpNew",P_Juxts2_ExpNew)
      P_Juxts2_ExpNew__RCurlyTok((lo,hi)) = st(P_Juxts2_ExpNew,P_RCurlyTok)((x,y) => (x,y)); d("Juxts2_ExpNew__RCurlyTok",P_Juxts2_ExpNew__RCurlyTok)
      P_IfTok__ParenExp((lo,hi)) = ts(P_IfTok,P_ParenExp)((x,y) => (x,y)); d("IfTok__ParenExp",P_IfTok__ParenExp)
      P_PostOp((lo,hi)) = t(P_PlusPlusTok)(x => PostIncOp) ::: t(P_MinusMinusTok)(x => PostDecOp); d("PostOp",P_PostOp)
      P_CommaTok__Commas1_VarDecl((lo,hi)) = ts(P_CommaTok,P_Commas1_VarDecl)((x,y) => (x,y)); d("CommaTok__Commas1_VarDecl",P_CommaTok__Commas1_VarDecl)
      P_Option_DoTok((lo,hi)) = t(P_DoTok)(x => Some(x)); d("Option_DoTok",P_Option_DoTok)
      P_AndTok__ExpEq_ExpJuxt((lo,hi)) = ts(P_AndTok,P_ExpEq_ExpJuxt)((x,y) => (x,y)); d("AndTok__ExpEq_ExpJuxt",P_AndTok__ExpEq_ExpJuxt)
      P_MinusTok__ExpMul_ExpJuxt((lo,hi)) = ts(P_MinusTok,P_ExpMul_ExpJuxt)((x,y) => (x,y)); d("MinusTok__ExpMul_ExpJuxt",P_MinusTok__ExpMul_ExpJuxt)
      P_CommaTok__Commas1_ExpCond_ExpJuxt((lo,hi)) = ts(P_CommaTok,P_Commas1_ExpCond_ExpJuxt)((x,y) => (x,y)); d("CommaTok__Commas1_ExpCond_ExpJuxt",P_CommaTok__Commas1_ExpCond_ExpJuxt)
      P_Commas0_StmtHelperBS__SemiTok((lo,hi)) = nt(P_Commas0_StmtHelperBS,P_SemiTok)((x,y) => (x,y)); d("Commas0_StmtHelperBS__SemiTok",P_Commas0_StmtHelperBS__SemiTok)
      P_ExpHigh__DotTok((lo,hi)) = st(P_ExpHigh,P_DotTok)((x,y) => (x,y)); d("ExpHigh__DotTok",P_ExpHigh__DotTok)
      P_Commas2_Type((lo,hi)) = ss(P_Type,P_CommaTok__Commas1_Type)((x,y) => x :: y._2); d("Commas2_Type",P_Commas2_Type)
      P_CommaTok__Commas1_Type((lo,hi)) = ts(P_CommaTok,P_Commas1_Type)((x,y) => (x,y)); d("CommaTok__Commas1_Type",P_CommaTok__Commas1_Type)
      P_ModTok__ExpUnary_ExpJuxtNP((lo,hi)) = ts(P_ModTok,P_ExpUnary_ExpJuxtNP)((x,y) => (x,y)); d("ModTok__ExpUnary_ExpJuxtNP",P_ModTok__ExpUnary_ExpJuxtNP)
      P_MinusTok__ExpMul_ExpNew((lo,hi)) = ts(P_MinusTok,P_ExpMul_ExpNew)((x,y) => (x,y)); d("MinusTok__ExpMul_ExpNew",P_MinusTok__ExpMul_ExpNew)
      P_ForInfo__RParenTok__Stmt((lo,hi)) = ss(P_ForInfo,P_RParenTok__Stmt)((x,y) => (x,y._1,y._2)); d("ForInfo__RParenTok__Stmt",P_ForInfo__RParenTok__Stmt)
      P_ExpParens((lo,hi)) = ts(P_LParenTok,P_ExpAssignNC__RParenTok)((x,y) => ParenAExp(y._1)) ::: tt(P_LParenTok,P_RParenTok)((x,y) => ArrayAExp(EmptyList, ParenAround)) ::: ts(P_LParenTok,P_Commas2_ExpCond_ExpJuxt__RParenTok)((x,y) => ArrayAExp(CommaList(y._1), ParenAround)) ::: ts(P_LParenTok,P_Juxts2_ExpNew__RParenTok)((x,y) => ArrayAExp(JuxtList(y._1), ParenAround)); d("ExpParens",P_ExpParens)
      P_TypeArgs((lo,hi)) = ts(P_LtTok,P_List_Type__GtTok)((x,y) => y._1); d("TypeArgs",P_TypeArgs)
      P_Option_TypeArgs((lo,hi)) = s(P_TypeArgs)(x => Some(x)); d("Option_TypeArgs",P_Option_TypeArgs)
      P_UnsignedRShiftTok__ExpAdd_ExpJuxt((lo,hi)) = ts(P_UnsignedRShiftTok,P_ExpAdd_ExpJuxt)((x,y) => (x,y)); d("UnsignedRShiftTok__ExpAdd_ExpJuxt",P_UnsignedRShiftTok__ExpAdd_ExpJuxt)
      P_Juxts2_VarDecl((lo,hi)) = ss(P_VarDecl,P_Juxts1_VarDecl)((x,y) => x :: y); d("Juxts2_VarDecl",P_Juxts2_VarDecl)
      P_Commas2_ExpCond_ExpJuxt__RBrackTok((lo,hi)) = st(P_Commas2_ExpCond_ExpJuxt,P_RBrackTok)((x,y) => (x,y)); d("Commas2_ExpCond_ExpJuxt__RBrackTok",P_Commas2_ExpCond_ExpJuxt__RBrackTok)
      P_PlusTok__ExpMul_ExpJuxtNP((lo,hi)) = ts(P_PlusTok,P_ExpMul_ExpJuxtNP)((x,y) => (x,y)); d("PlusTok__ExpMul_ExpJuxtNP",P_PlusTok__ExpMul_ExpJuxtNP)
      P_MaybeParenExp__Block((lo,hi)) = ss(P_MaybeParenExp,P_Block)((x,y) => (x,y)); d("MaybeParenExp__Block",P_MaybeParenExp__Block)
      P_MulTok__ExpUnary_ExpNew((lo,hi)) = ts(P_MulTok,P_ExpUnary_ExpNew)((x,y) => (x,y)); d("MulTok__ExpUnary_ExpNew",P_MulTok__ExpUnary_ExpNew)
      P_ColonTok__ExpJuxt((lo,hi)) = ts(P_ColonTok,P_ExpJuxt)((x,y) => (x,y)); d("ColonTok__ExpJuxt",P_ColonTok__ExpJuxt)
      P_ExpCond_ExpNew__RBrackTok((lo,hi)) = st(P_ExpCond_ExpNew,P_RBrackTok)((x,y) => (x,y)); d("ExpCond_ExpNew__RBrackTok",P_ExpCond_ExpNew__RBrackTok)
      P_PrimType((lo,hi)) = t(P_ByteTok)(x => ByteType) ::: t(P_LongTok)(x => LongType) ::: t(P_IntTok)(x => IntType) ::: t(P_CharTok)(x => CharType) ::: t(P_DoubleTok)(x => DoubleType) ::: t(P_FloatTok)(x => FloatType) ::: t(P_ShortTok)(x => ShortType); d("PrimType",P_PrimType)
      P_Commas2_ExpCond_ExpJuxt__RCurlyTok((lo,hi)) = st(P_Commas2_ExpCond_ExpJuxt,P_RCurlyTok)((x,y) => (x,y)); d("Commas2_ExpCond_ExpJuxt__RCurlyTok",P_Commas2_ExpCond_ExpJuxt__RCurlyTok)
      P_ExpAssignNP__ThenTok((lo,hi)) = st(P_ExpAssignNP,P_ThenTok)((x,y) => (x,y)); d("ExpAssignNP__ThenTok",P_ExpAssignNP__ThenTok)
      P_ExpAssign__RParenTok((lo,hi)) = st(P_ExpAssign,P_RParenTok)((x,y) => (x,y)); d("ExpAssign__RParenTok",P_ExpAssign__RParenTok)
      P_ExpHigh__LParenTok((lo,hi)) = st(P_ExpHigh,P_LParenTok)((x,y) => (x,y)); d("ExpHigh__LParenTok",P_ExpHigh__LParenTok)
      P_MaybeStmt__ElseTok((lo,hi)) = nt(P_MaybeStmt,P_ElseTok)((x,y) => (x,y)); d("MaybeStmt__ElseTok",P_MaybeStmt__ElseTok)
      P_Option_ThenTok__MaybeStmt__ElseTok((lo,hi)) = ns(P_Option_ThenTok,P_MaybeStmt__ElseTok)((x,y) => (x,y._1,y._2)); d("Option_ThenTok__MaybeStmt__ElseTok",P_Option_ThenTok__MaybeStmt__ElseTok)
      P_WhileUntil((lo,hi)) = t(P_WhileTok)(x => false) ::: t(P_UntilTok)(x => true); d("WhileUntil",P_WhileUntil)
      P_Mod((lo,hi)) = ts(P_AtTok,P_Ident)((x,y) => Annotation(y)) ::: t(P_AbstractTok)(x => Abstract()) ::: t(P_ProtectedTok)(x => Protected()) ::: t(P_StrictfpTok)(x => Strictfp()) ::: t(P_PublicTok)(x => Public()) ::: t(P_SynchronizedTok)(x => Synchronized()) ::: t(P_VolatileTok)(x => Volatile()) ::: t(P_TransientTok)(x => Transient()) ::: t(P_FinalTok)(x => Final()) ::: t(P_PrivateTok)(x => Private()) ::: t(P_StaticTok)(x => Static()); d("Mod",P_Mod)
      P_Juxts1_Mod((lo,hi)) = s(P_Mod)(x => List(x)) ::: ss(P_Mod,P_Juxts1_Mod)((x,y) => x :: y); d("Juxts1_Mod",P_Juxts1_Mod)
      P_Juxts0_Mod((lo,hi)) = s(P_Juxts1_Mod)(x => x); d("Juxts0_Mod",P_Juxts0_Mod)
      P_List_ExpAssignNC__RCurlyTok((lo,hi)) = nt(P_List_ExpAssignNC,P_RCurlyTok)((x,y) => (x,y)); d("List_ExpAssignNC__RCurlyTok",P_List_ExpAssignNC__RCurlyTok)
      P_SemiTok__Commas0_ExpAssignNC((lo,hi)) = tn(P_SemiTok,P_Commas0_ExpAssignNC)((x,y) => (x,y)); d("SemiTok__Commas0_ExpAssignNC",P_SemiTok__Commas0_ExpAssignNC)
      P_Option_ExpAssign__SemiTok__Commas0_ExpAssignNC((lo,hi)) = ns(P_Option_ExpAssign,P_SemiTok__Commas0_ExpAssignNC)((x,y) => (x,y._1,y._2)); d("Option_ExpAssign__SemiTok__Commas0_ExpAssignNC",P_Option_ExpAssign__SemiTok__Commas0_ExpAssignNC)
      P_IfTok__ExpAssignNP__ThenTok((lo,hi)) = ts(P_IfTok,P_ExpAssignNP__ThenTok)((x,y) => (x,y._1,y._2)); d("IfTok__ExpAssignNP__ThenTok",P_IfTok__ExpAssignNP__ThenTok)
      P_DoTok__MaybeStmt((lo,hi)) = tn(P_DoTok,P_MaybeStmt)((x,y) => (x,y)); d("DoTok__MaybeStmt",P_DoTok__MaybeStmt)
      P_LBrackTok__RBrackTok((lo,hi)) = tt(P_LBrackTok,P_RBrackTok)((x,y) => (x,y)); d("LBrackTok__RBrackTok",P_LBrackTok__RBrackTok)
      P_RParenTok__Stmt((lo,hi)) = ts(P_RParenTok,P_Stmt)((x,y) => (x,y)); d("RParenTok__Stmt",P_RParenTok__Stmt)
      P_EqTok__ExpCommas((lo,hi)) = ts(P_EqTok,P_ExpCommas)((x,y) => (x,y)); d("EqTok__ExpCommas",P_EqTok__ExpCommas)
      P_ExpCond_ExpNew__RCurlyTok((lo,hi)) = st(P_ExpCond_ExpNew,P_RCurlyTok)((x,y) => (x,y)); d("ExpCond_ExpNew__RCurlyTok",P_ExpCond_ExpNew__RCurlyTok)
      P_ForTok__LParenTok((lo,hi)) = tt(P_ForTok,P_LParenTok)((x,y) => (x,y)); d("ForTok__LParenTok",P_ForTok__LParenTok)
      P_Commas2_ExpCond_ExpJuxt((lo,hi)) = ss(P_ExpCond_ExpJuxt,P_CommaTok__Commas1_ExpCond_ExpJuxt)((x,y) => x :: y._2); d("Commas2_ExpCond_ExpJuxt",P_Commas2_ExpCond_ExpJuxt)
      P_Juxts2_Type((lo,hi)) = ss(P_Type,P_Juxts1_Type)((x,y) => x :: y); d("Juxts2_Type",P_Juxts2_Type)
      P_DivTok__ExpUnary_ExpJuxt((lo,hi)) = ts(P_DivTok,P_ExpUnary_ExpJuxt)((x,y) => (x,y)); d("DivTok__ExpUnary_ExpJuxt",P_DivTok__ExpUnary_ExpJuxt)
      P_LParenTok__Type((lo,hi)) = ts(P_LParenTok,P_Type)((x,y) => (x,y)); d("LParenTok__Type",P_LParenTok__Type)
      P_CommaTok__Commas1_ExpAssignNC((lo,hi)) = ts(P_CommaTok,P_Commas1_ExpAssignNC)((x,y) => (x,y)); d("CommaTok__Commas1_ExpAssignNC",P_CommaTok__Commas1_ExpAssignNC)
      P_PlusTok__ExpMul_ExpJuxt((lo,hi)) = ts(P_PlusTok,P_ExpMul_ExpJuxt)((x,y) => (x,y)); d("PlusTok__ExpMul_ExpJuxt",P_PlusTok__ExpMul_ExpJuxt)
      P_CommaTok__Commas1_StmtHelperBS((lo,hi)) = ts(P_CommaTok,P_Commas1_StmtHelperBS)((x,y) => (x,y)); d("CommaTok__Commas1_StmtHelperBS",P_CommaTok__Commas1_StmtHelperBS)
      P_Juxts2_ExpNew__RParenTok((lo,hi)) = st(P_Juxts2_ExpNew,P_RParenTok)((x,y) => (x,y)); d("Juxts2_ExpNew__RParenTok",P_Juxts2_ExpNew__RParenTok)
      P_List_ExpAssignNC__RParenTok((lo,hi)) = nt(P_List_ExpAssignNC,P_RParenTok)((x,y) => (x,y)); d("List_ExpAssignNC__RParenTok",P_List_ExpAssignNC__RParenTok)
      P_AssignOp__ExpAssign((lo,hi)) = ss(P_AssignOp,P_ExpAssign)((x,y) => (x,y)); d("AssignOp__ExpAssign",P_AssignOp__ExpAssign)
      P_MinusTok__ExpMul_ExpJuxtNP((lo,hi)) = ts(P_MinusTok,P_ExpMul_ExpJuxtNP)((x,y) => (x,y)); d("MinusTok__ExpMul_ExpJuxtNP",P_MinusTok__ExpMul_ExpJuxtNP)
      P_ExpHigh__LBrackTok((lo,hi)) = st(P_ExpHigh,P_LBrackTok)((x,y) => (x,y)); d("ExpHigh__LBrackTok",P_ExpHigh__LBrackTok)
      P_MulTok__ExpUnary_ExpJuxtNP((lo,hi)) = ts(P_MulTok,P_ExpUnary_ExpJuxtNP)((x,y) => (x,y)); d("MulTok__ExpUnary_ExpJuxtNP",P_MulTok__ExpUnary_ExpJuxtNP)
      P_Lit((lo,hi)) = t(P_StringLitTok)(x => StringALit(x.v)) ::: t(P_DoubleLitTok)(x => DoubleALit(x.v)) ::: t(P_CharLitTok)(x => CharALit(x.v)) ::: t(P_NullLitTok)(x => NullALit()) ::: t(P_LongLitTok)(x => LongALit(x.v)) ::: t(P_FloatLitTok)(x => FloatALit(x.v)) ::: t(P_BoolLitTok)(x => BoolALit(x.v)) ::: t(P_IntLitTok)(x => IntALit(x.v)); d("Lit",P_Lit)
      P_DoTok__Stmt((lo,hi)) = ts(P_DoTok,P_Stmt)((x,y) => (x,y)); d("DoTok__Stmt",P_DoTok__Stmt)
      P_GeTok__ExpShift_ExpJuxt((lo,hi)) = ts(P_GeTok,P_ExpShift_ExpJuxt)((x,y) => (x,y)); d("GeTok__ExpShift_ExpJuxt",P_GeTok__ExpShift_ExpJuxt)
      P_InstanceofTok__Type((lo,hi)) = ts(P_InstanceofTok,P_Type)((x,y) => (x,y)); d("InstanceofTok__Type",P_InstanceofTok__Type)
      P_ModTok__ExpUnary_ExpNew((lo,hi)) = ts(P_ModTok,P_ExpUnary_ExpNew)((x,y) => (x,y)); d("ModTok__ExpUnary_ExpNew",P_ModTok__ExpUnary_ExpNew)
      P_ExpAssign__ColonTok__ExpCond_ExpJuxt((lo,hi)) = ss(P_ExpAssign,P_ColonTok__ExpCond_ExpJuxt)((x,y) => (x,y._1,y._2)); d("ExpAssign__ColonTok__ExpCond_ExpJuxt",P_ExpAssign__ColonTok__ExpCond_ExpJuxt)
      P_WhileUntil__ParenExp((lo,hi)) = ss(P_WhileUntil,P_ParenExp)((x,y) => (x,y)); d("WhileUntil__ParenExp",P_WhileUntil__ParenExp)
      P_ExpAssignNC__RParenTok((lo,hi)) = st(P_ExpAssignNC,P_RParenTok)((x,y) => (x,y)); d("ExpAssignNC__RParenTok",P_ExpAssignNC__RParenTok)
      P_MulTok__ExpUnary_ExpJuxt((lo,hi)) = ts(P_MulTok,P_ExpUnary_ExpJuxt)((x,y) => (x,y)); d("MulTok__ExpUnary_ExpJuxt",P_MulTok__ExpUnary_ExpJuxt)
      P_ExpOrOr_ExpJuxt__QuestionTok((lo,hi)) = st(P_ExpOrOr_ExpJuxt,P_QuestionTok)((x,y) => (x,y)); d("ExpOrOr_ExpJuxt__QuestionTok",P_ExpOrOr_ExpJuxt__QuestionTok)
      P_Block((lo,hi)) = ts(P_LCurlyTok,P_Stmts__RCurlyTok)((x,y) => y._1); d("Block",P_Block)
      P_ThenTok__Stmt((lo,hi)) = ts(P_ThenTok,P_Stmt)((x,y) => (x,y)); d("ThenTok__Stmt",P_ThenTok__Stmt)
      P_RParenTok__ExpUnary_ExpJuxt((lo,hi)) = ts(P_RParenTok,P_ExpUnary_ExpJuxt)((x,y) => (x,y)); d("RParenTok__ExpUnary_ExpJuxt",P_RParenTok__ExpUnary_ExpJuxt)
      P_Ident((lo,hi)) = t(P_IdentTok)(x => x.name) ::: t(P_ThenTok)(x => "then") ::: t(P_UntilTok)(x => "until") ::: t(P_InTok)(x => "in"); d("Ident",P_Ident)
      P_Type((lo,hi)) = tn(P_QuestionTok,P_WildcardBounds)((x,y) => WildAType(y)) ::: s(P_PrimType)(x => PrimAType(x)) ::: s(P_Ident)(x => NameAType(x)) ::: ss(P_Type,P_TypeArgs)((x,y) => ApplyAType(x,y)) ::: ss(P_Type,P_LBrackTok__RBrackTok)((x,y) => ArrayAType(x)) ::: t(P_VoidTok)(x => VoidAType()) ::: ss(P_Type,P_DotTok__Ident)((x,y) => FieldAType(x,y._2)) ::: ss(P_Mod,P_Type)((x,y) => ModAType(x,y)); d("Type",P_Type)
      P_Juxts1_Type((lo,hi)) = s(P_Type)(x => List(x)) ::: ss(P_Type,P_Juxts1_Type)((x,y) => x :: y); d("Juxts1_Type",P_Juxts1_Type)
      P_List1_Type((lo,hi)) = s(P_Type)(x => SingleList(x)) ::: s(P_Commas2_Type)(x => CommaList(x)) ::: s(P_Juxts2_Type)(x => JuxtList(x)); d("List1_Type",P_List1_Type)
      P_List_Type((lo,hi)) = s(P_List1_Type)(x => x); d("List_Type",P_List_Type)
      P_Option_Type((lo,hi)) = s(P_Type)(x => Some(x)); d("Option_Type",P_Option_Type)
      P_Commas1_Type((lo,hi)) = s(P_Type)(x => List(x)) ::: ss(P_Type,P_CommaTok__Commas1_Type)((x,y) => x :: y._2); d("Commas1_Type",P_Commas1_Type)
      P_IdentDims((lo,hi)) = s(P_Ident)(x => (x,0)) ::: ss(P_IdentDims,P_LBrackTok__RBrackTok)((x,y) => (x._1,x._2+1)); d("IdentDims",P_IdentDims)
      P_VarDecl((lo,hi)) = s(P_IdentDims)(x => (x._1,x._2,None)) ::: ss(P_IdentDims,P_EqTok__ExpCommas)((x,y) => (x._1,x._2,Some(y._2))); d("VarDecl",P_VarDecl)
      P_Commas1_VarDecl((lo,hi)) = s(P_VarDecl)(x => List(x)) ::: ss(P_VarDecl,P_CommaTok__Commas1_VarDecl)((x,y) => x :: y._2); d("Commas1_VarDecl",P_Commas1_VarDecl)
      P_Juxts1_VarDecl((lo,hi)) = s(P_VarDecl)(x => List(x)) ::: ss(P_VarDecl,P_Juxts1_VarDecl)((x,y) => x :: y); d("Juxts1_VarDecl",P_Juxts1_VarDecl)
      P_Option_Type__IdentDims((lo,hi)) = ns(P_Option_Type,P_IdentDims)((x,y) => (x,y)); d("Option_Type__IdentDims",P_Option_Type__IdentDims)
      P_Option_TypeArgs__Ident((lo,hi)) = ns(P_Option_TypeArgs,P_Ident)((x,y) => (x,y)); d("Option_TypeArgs__Ident",P_Option_TypeArgs__Ident)
      P_Option_Ident((lo,hi)) = s(P_Ident)(x => Some(x)); d("Option_Ident",P_Option_Ident)
      P_ExpHighNA((lo,hi)) = ss(P_ExpHigh__ColonColonTok,P_Option_TypeArgs__Ident)((x,y) => MethodRefAExp(x._1,y._1,y._2)) ::: ss(P_ExpHigh__LBrackTok,P_List_ExpAssignNC__RBrackTok)((x,y) => ApplyAExp(x._1,y._1,BrackAround)) ::: ss(P_ExpHigh__DotTok,P_Option_TypeArgs__Ident)((x,y) => FieldAExp(x._1,y._1,y._2)) ::: ss(P_ExpHigh,P_TypeArgs)((x,y) => TypeApplyAExp(x,y)) ::: ss(P_ExpHigh__ColonColonTok,P_Option_TypeArgs__NewTok)((x,y) => NewRefAExp(x._1,y._1)) ::: s(P_Lit)(x => x) ::: s(P_Ident)(x => NameAExp(x)) ::: ss(P_ExpHigh__LParenTok,P_List_ExpAssignNC__RParenTok)((x,y) => ApplyAExp(x._1,y._1,ParenAround)) ::: ss(P_ExpHigh__LCurlyTok,P_List_ExpAssignNC__RCurlyTok)((x,y) => ApplyAExp(x._1,y._1,CurlyAround)); d("ExpHighNA",P_ExpHighNA)
      P_ExpNewNA((lo,hi)) = s(P_ExpHighNA)(x => x) ::: ts(P_NewTok,P_Option_TypeArgs__ExpJuxt)((x,y) => NewAExp(y._1,y._2)) ::: tn(P_QuestionTok,P_WildcardBounds)((x,y) => WildAExp(y)); d("ExpNewNA",P_ExpNewNA)
      P_Juxts1_ExpNewNA((lo,hi)) = s(P_ExpNewNA)(x => List(x)) ::: ss(P_ExpNewNA,P_Juxts1_ExpNewNA)((x,y) => x :: y); d("Juxts1_ExpNewNA",P_Juxts1_ExpNewNA)
      P_ExpHighNP((lo,hi)) = tt(P_LBrackTok,P_RBrackTok)((x,y) => ArrayAExp(EmptyList, BrackAround)) ::: ts(P_LCurlyTok,P_Juxts2_ExpNew__RCurlyTok)((x,y) => ArrayAExp(JuxtList(y._1), CurlyAround)) ::: ts(P_LBrackTok,P_Commas2_ExpCond_ExpJuxt__RBrackTok)((x,y) => ArrayAExp(CommaList(y._1), BrackAround)) ::: ts(P_LCurlyTok,P_Commas2_ExpCond_ExpJuxt__RCurlyTok)((x,y) => ArrayAExp(CommaList(y._1), CurlyAround)) ::: ts(P_LBrackTok,P_ExpCond_ExpNew__RBrackTok)((x,y) => ArrayAExp(SingleList(y._1),BrackAround)) ::: ts(P_LBrackTok,P_Juxts2_ExpNew__RBrackTok)((x,y) => ArrayAExp(JuxtList(y._1), BrackAround)) ::: tt(P_LCurlyTok,P_RCurlyTok)((x,y) => ArrayAExp(EmptyList, CurlyAround)) ::: ts(P_LCurlyTok,P_ExpCond_ExpNew__RCurlyTok)((x,y) => ArrayAExp(SingleList(y._1),CurlyAround)) ::: s(P_ExpHighNA)(x => x); d("ExpHighNP",P_ExpHighNP)
      P_ExpNewNP((lo,hi)) = s(P_ExpHighNP)(x => x) ::: ts(P_NewTok,P_Option_TypeArgs__ExpJuxt)((x,y) => NewAExp(y._1,y._2)) ::: tn(P_QuestionTok,P_WildcardBounds)((x,y) => WildAExp(y)); d("ExpNewNP",P_ExpNewNP)
      P_ExpJuxtNP((lo,hi)) = s(P_ExpNewNP)(x => x) ::: ss(P_ExpNew,P_Juxts1_ExpNewNA)((x,y) => ApplyAExp(x,JuxtList(y),NoAround)); d("ExpJuxtNP",P_ExpJuxtNP)
      P_ExpUnary_ExpJuxtNP((lo,hi)) = s(P_ExpJuxtNP)(x => x) ::: ss(P_ExpUnary_ExpJuxt,P_PostOp)((x,y) => UnaryAExp(y,x)) ::: ss(P_PreOp,P_ExpUnary_ExpJuxt)((x,y) => UnaryAExp(x,y)) ::: ss(P_LParenTok__Type,P_RParenTok__ExpUnary_ExpJuxt)((x,y) => CastAExp(x._2,y._2)); d("ExpUnary_ExpJuxtNP",P_ExpUnary_ExpJuxtNP)
      P_ExpMul_ExpJuxtNP((lo,hi)) = s(P_ExpUnary_ExpJuxtNP)(x => x) ::: ss(P_ExpMul_ExpJuxt,P_MulTok__ExpUnary_ExpJuxtNP)((x,y) => BinaryAExp(MulOp,x,y._2)) ::: ss(P_ExpMul_ExpJuxt,P_DivTok__ExpUnary_ExpJuxtNP)((x,y) => BinaryAExp(DivOp,x,y._2)) ::: ss(P_ExpMul_ExpJuxt,P_ModTok__ExpUnary_ExpJuxtNP)((x,y) => BinaryAExp(ModOp,x,y._2)); d("ExpMul_ExpJuxtNP",P_ExpMul_ExpJuxtNP)
      P_ExpAdd_ExpJuxtNP((lo,hi)) = s(P_ExpMul_ExpJuxtNP)(x => x) ::: ss(P_ExpAdd_ExpJuxt,P_PlusTok__ExpMul_ExpJuxtNP)((x,y) => BinaryAExp(AddOp,x,y._2)) ::: ss(P_ExpAdd_ExpJuxt,P_MinusTok__ExpMul_ExpJuxtNP)((x,y) => BinaryAExp(SubOp,x,y._2)); d("ExpAdd_ExpJuxtNP",P_ExpAdd_ExpJuxtNP)
      P_ExpShift_ExpJuxtNP((lo,hi)) = s(P_ExpAdd_ExpJuxtNP)(x => x) ::: ss(P_ExpShift_ExpJuxt,P_LShiftTok__ExpAdd_ExpJuxt)((x,y) => BinaryAExp(LShiftOp,x,y._2)) ::: ss(P_ExpShift_ExpJuxt,P_RShiftTok__ExpAdd_ExpJuxt)((x,y) => BinaryAExp(RShiftOp,x,y._2)) ::: ss(P_ExpShift_ExpJuxt,P_UnsignedRShiftTok__ExpAdd_ExpJuxt)((x,y) => BinaryAExp(UnsignedRShiftOp,x,y._2)); d("ExpShift_ExpJuxtNP",P_ExpShift_ExpJuxtNP)
      P_ExpRel_ExpJuxtNP((lo,hi)) = ss(P_ExpRel_ExpJuxt,P_LtTok__ExpShift_ExpJuxt)((x,y) => BinaryAExp(LtOp,x,y._2)) ::: ss(P_ExpRel_ExpJuxt,P_GeTok__ExpShift_ExpJuxt)((x,y) => BinaryAExp(GeOp,x,y._2)) ::: ss(P_ExpRel_ExpJuxt,P_LeTok__ExpShift_ExpJuxt)((x,y) => BinaryAExp(LeOp,x,y._2)) ::: ss(P_ExpRel_ExpJuxt,P_InstanceofTok__Type)((x,y) => InstanceofAExp(x,y._2)) ::: s(P_ExpShift_ExpJuxtNP)(x => x) ::: ss(P_ExpRel_ExpJuxt,P_GtTok__ExpShift_ExpJuxt)((x,y) => BinaryAExp(GtOp,x,y._2)); d("ExpRel_ExpJuxtNP",P_ExpRel_ExpJuxtNP)
      P_ExpEq_ExpJuxtNP((lo,hi)) = s(P_ExpRel_ExpJuxtNP)(x => x) ::: ss(P_ExpEq_ExpJuxt,P_EqEqTok__ExpRel_ExpJuxt)((x,y) => BinaryAExp(EqOp,x,y._2)) ::: ss(P_ExpEq_ExpJuxt,P_NeTok__ExpRel_ExpJuxt)((x,y) => BinaryAExp(NeOp,x,y._2)); d("ExpEq_ExpJuxtNP",P_ExpEq_ExpJuxtNP)
      P_ExpAnd_ExpJuxtNP((lo,hi)) = s(P_ExpEq_ExpJuxtNP)(x => x) ::: ss(P_ExpAnd_ExpJuxt,P_AndTok__ExpEq_ExpJuxt)((x,y) => BinaryAExp(AndOp,x,y._2)); d("ExpAnd_ExpJuxtNP",P_ExpAnd_ExpJuxtNP)
      P_ExpXor_ExpJuxtNP((lo,hi)) = s(P_ExpAnd_ExpJuxtNP)(x => x) ::: ss(P_ExpXor_ExpJuxt,P_XorTok__ExpAnd_ExpJuxt)((x,y) => BinaryAExp(XorOp,x,y._2)); d("ExpXor_ExpJuxtNP",P_ExpXor_ExpJuxtNP)
      P_ExpOr_ExpJuxtNP((lo,hi)) = s(P_ExpXor_ExpJuxtNP)(x => x) ::: ss(P_ExpOr_ExpJuxt,P_OrTok__ExpXor_ExpJuxt)((x,y) => BinaryAExp(OrOp,x,y._2)); d("ExpOr_ExpJuxtNP",P_ExpOr_ExpJuxtNP)
      P_ExpAndAnd_ExpJuxtNP((lo,hi)) = s(P_ExpOr_ExpJuxtNP)(x => x) ::: ss(P_ExpAndAnd_ExpJuxt,P_AndAndTok__ExpOr_ExpJuxt)((x,y) => BinaryAExp(AndAndOp,x,y._2)); d("ExpAndAnd_ExpJuxtNP",P_ExpAndAnd_ExpJuxtNP)
      P_ExpOrOr_ExpJuxtNP((lo,hi)) = s(P_ExpAndAnd_ExpJuxtNP)(x => x) ::: ss(P_ExpOrOr_ExpJuxt,P_OrOrTok__ExpAndAnd_ExpJuxt)((x,y) => BinaryAExp(OrOrOp,x,y._2)); d("ExpOrOr_ExpJuxtNP",P_ExpOrOr_ExpJuxtNP)
      P_ExpCond_ExpJuxtNP((lo,hi)) = s(P_ExpOrOr_ExpJuxtNP)(x => x) ::: ss(P_ExpOrOr_ExpJuxt__QuestionTok,P_ExpAssign__ColonTok__ExpCond_ExpJuxt)((x,y) => CondAExp(x._1,y._1,y._3)); d("ExpCond_ExpJuxtNP",P_ExpCond_ExpJuxtNP)
      P_ExpAssignNP((lo,hi)) = s(P_ExpCond_ExpJuxtNP)(x => x) ::: ss(P_ExpJuxt,P_AssignOp__ExpAssign)((x,y) => AssignAExp(y._1,x,y._2)); d("ExpAssignNP",P_ExpAssignNP)
      P_MaybeParenExp((lo,hi)) = s(P_ExpAssignNP)(x => x) ::: s(P_ParenExp)(x => x); d("MaybeParenExp",P_MaybeParenExp)
      P_MaybeParenExp__Option_DoTok((lo,hi)) = sn(P_MaybeParenExp,P_Option_DoTok)((x,y) => (x,y)); d("MaybeParenExp__Option_DoTok",P_MaybeParenExp__Option_DoTok)
      P_MaybeParenExp__Option_ThenTok((lo,hi)) = sn(P_MaybeParenExp,P_Option_ThenTok)((x,y) => (x,y)); d("MaybeParenExp__Option_ThenTok",P_MaybeParenExp__Option_ThenTok)
      P_ExpHigh((lo,hi)) = s(P_ExpParens)(x => x) ::: s(P_ExpHighNP)(x => x); d("ExpHigh",P_ExpHigh)
      P_ExpNew((lo,hi)) = s(P_ExpHigh)(x => x) ::: ts(P_NewTok,P_Option_TypeArgs__ExpJuxt)((x,y) => NewAExp(y._1,y._2)) ::: tn(P_QuestionTok,P_WildcardBounds)((x,y) => WildAExp(y)); d("ExpNew",P_ExpNew)
      P_ExpJuxt((lo,hi)) = s(P_ExpNew)(x => x) ::: ss(P_ExpNew,P_Juxts1_ExpNewNA)((x,y) => ApplyAExp(x,JuxtList(y),NoAround)); d("ExpJuxt",P_ExpJuxt)
      P_Option_ExpJuxt((lo,hi)) = s(P_ExpJuxt)(x => Some(x)); d("Option_ExpJuxt",P_Option_ExpJuxt)
      P_Option_TypeArgs__ExpJuxt((lo,hi)) = ns(P_Option_TypeArgs,P_ExpJuxt)((x,y) => (x,y)); d("Option_TypeArgs__ExpJuxt",P_Option_TypeArgs__ExpJuxt)
      P_ExpUnary_ExpJuxt((lo,hi)) = s(P_ExpJuxt)(x => x) ::: ss(P_ExpUnary_ExpJuxt,P_PostOp)((x,y) => UnaryAExp(y,x)) ::: ss(P_PreOp,P_ExpUnary_ExpJuxt)((x,y) => UnaryAExp(x,y)) ::: ss(P_LParenTok__Type,P_RParenTok__ExpUnary_ExpJuxt)((x,y) => CastAExp(x._2,y._2)); d("ExpUnary_ExpJuxt",P_ExpUnary_ExpJuxt)
      P_ExpMul_ExpJuxt((lo,hi)) = s(P_ExpUnary_ExpJuxt)(x => x) ::: ss(P_ExpMul_ExpJuxt,P_MulTok__ExpUnary_ExpJuxt)((x,y) => BinaryAExp(MulOp,x,y._2)) ::: ss(P_ExpMul_ExpJuxt,P_DivTok__ExpUnary_ExpJuxt)((x,y) => BinaryAExp(DivOp,x,y._2)) ::: ss(P_ExpMul_ExpJuxt,P_ModTok__ExpUnary_ExpJuxt)((x,y) => BinaryAExp(ModOp,x,y._2)); d("ExpMul_ExpJuxt",P_ExpMul_ExpJuxt)
      P_ExpAdd_ExpJuxt((lo,hi)) = s(P_ExpMul_ExpJuxt)(x => x) ::: ss(P_ExpAdd_ExpJuxt,P_PlusTok__ExpMul_ExpJuxt)((x,y) => BinaryAExp(AddOp,x,y._2)) ::: ss(P_ExpAdd_ExpJuxt,P_MinusTok__ExpMul_ExpJuxt)((x,y) => BinaryAExp(SubOp,x,y._2)); d("ExpAdd_ExpJuxt",P_ExpAdd_ExpJuxt)
      P_ExpShift_ExpJuxt((lo,hi)) = s(P_ExpAdd_ExpJuxt)(x => x) ::: ss(P_ExpShift_ExpJuxt,P_LShiftTok__ExpAdd_ExpJuxt)((x,y) => BinaryAExp(LShiftOp,x,y._2)) ::: ss(P_ExpShift_ExpJuxt,P_RShiftTok__ExpAdd_ExpJuxt)((x,y) => BinaryAExp(RShiftOp,x,y._2)) ::: ss(P_ExpShift_ExpJuxt,P_UnsignedRShiftTok__ExpAdd_ExpJuxt)((x,y) => BinaryAExp(UnsignedRShiftOp,x,y._2)); d("ExpShift_ExpJuxt",P_ExpShift_ExpJuxt)
      P_ExpRel_ExpJuxt((lo,hi)) = ss(P_ExpRel_ExpJuxt,P_LtTok__ExpShift_ExpJuxt)((x,y) => BinaryAExp(LtOp,x,y._2)) ::: ss(P_ExpRel_ExpJuxt,P_GeTok__ExpShift_ExpJuxt)((x,y) => BinaryAExp(GeOp,x,y._2)) ::: ss(P_ExpRel_ExpJuxt,P_LeTok__ExpShift_ExpJuxt)((x,y) => BinaryAExp(LeOp,x,y._2)) ::: ss(P_ExpRel_ExpJuxt,P_InstanceofTok__Type)((x,y) => InstanceofAExp(x,y._2)) ::: s(P_ExpShift_ExpJuxt)(x => x) ::: ss(P_ExpRel_ExpJuxt,P_GtTok__ExpShift_ExpJuxt)((x,y) => BinaryAExp(GtOp,x,y._2)); d("ExpRel_ExpJuxt",P_ExpRel_ExpJuxt)
      P_ExpEq_ExpJuxt((lo,hi)) = s(P_ExpRel_ExpJuxt)(x => x) ::: ss(P_ExpEq_ExpJuxt,P_EqEqTok__ExpRel_ExpJuxt)((x,y) => BinaryAExp(EqOp,x,y._2)) ::: ss(P_ExpEq_ExpJuxt,P_NeTok__ExpRel_ExpJuxt)((x,y) => BinaryAExp(NeOp,x,y._2)); d("ExpEq_ExpJuxt",P_ExpEq_ExpJuxt)
      P_ExpAnd_ExpJuxt((lo,hi)) = s(P_ExpEq_ExpJuxt)(x => x) ::: ss(P_ExpAnd_ExpJuxt,P_AndTok__ExpEq_ExpJuxt)((x,y) => BinaryAExp(AndOp,x,y._2)); d("ExpAnd_ExpJuxt",P_ExpAnd_ExpJuxt)
      P_ExpXor_ExpJuxt((lo,hi)) = s(P_ExpAnd_ExpJuxt)(x => x) ::: ss(P_ExpXor_ExpJuxt,P_XorTok__ExpAnd_ExpJuxt)((x,y) => BinaryAExp(XorOp,x,y._2)); d("ExpXor_ExpJuxt",P_ExpXor_ExpJuxt)
      P_ExpOr_ExpJuxt((lo,hi)) = s(P_ExpXor_ExpJuxt)(x => x) ::: ss(P_ExpOr_ExpJuxt,P_OrTok__ExpXor_ExpJuxt)((x,y) => BinaryAExp(OrOp,x,y._2)); d("ExpOr_ExpJuxt",P_ExpOr_ExpJuxt)
      P_ExpAndAnd_ExpJuxt((lo,hi)) = s(P_ExpOr_ExpJuxt)(x => x) ::: ss(P_ExpAndAnd_ExpJuxt,P_AndAndTok__ExpOr_ExpJuxt)((x,y) => BinaryAExp(AndAndOp,x,y._2)); d("ExpAndAnd_ExpJuxt",P_ExpAndAnd_ExpJuxt)
      P_ExpOrOr_ExpJuxt((lo,hi)) = s(P_ExpAndAnd_ExpJuxt)(x => x) ::: ss(P_ExpOrOr_ExpJuxt,P_OrOrTok__ExpAndAnd_ExpJuxt)((x,y) => BinaryAExp(OrOrOp,x,y._2)); d("ExpOrOr_ExpJuxt",P_ExpOrOr_ExpJuxt)
      P_ExpCond_ExpJuxt((lo,hi)) = s(P_ExpOrOr_ExpJuxt)(x => x) ::: ss(P_ExpOrOr_ExpJuxt__QuestionTok,P_ExpAssign__ColonTok__ExpCond_ExpJuxt)((x,y) => CondAExp(x._1,y._1,y._3)); d("ExpCond_ExpJuxt",P_ExpCond_ExpJuxt)
      P_Commas1_ExpCond_ExpJuxt((lo,hi)) = s(P_ExpCond_ExpJuxt)(x => List(x)) ::: ss(P_ExpCond_ExpJuxt,P_CommaTok__Commas1_ExpCond_ExpJuxt)((x,y) => x :: y._2); d("Commas1_ExpCond_ExpJuxt",P_Commas1_ExpCond_ExpJuxt)
      P_ExpCommas((lo,hi)) = s(P_ExpCond_ExpJuxt)(x => x) ::: s(P_Commas2_ExpCond_ExpJuxt)(x => ArrayAExp(CommaList(x),NoAround)); d("ExpCommas",P_ExpCommas)
      P_ExpAssign((lo,hi)) = s(P_ExpCommas)(x => x) ::: ss(P_ExpJuxt,P_AssignOp__ExpAssign)((x,y) => AssignAExp(y._1,x,y._2)); d("ExpAssign",P_ExpAssign)
      P_Option_ExpAssign((lo,hi)) = s(P_ExpAssign)(x => Some(x)); d("Option_ExpAssign",P_Option_ExpAssign)
      P_StmtHelperBS((lo,hi)) = tn(P_BreakTok,P_Option_Ident)((x,y) => BreakAStmt(y)) ::: ss(P_IfTok__ExpAssignNP,P_ThenTok__Stmt)((x,y) => IfAStmt(x._2,y._2)) ::: ts(P_IfTok,P_ExpAssignNP)((x,y) => IfElseAStmt(y,EmptyAStmt(),HoleAStmt())) ::: ss(P_WhileUntil__ParenExp,P_Option_DoTok__Stmt)((x,y) => WhileAStmt(x._2,y._2,x._1)) ::: ss(P_IfTok__ParenExp__Option_ThenTok,P_MaybeStmt__ElseTok__Stmt)((x,y) => IfElseAStmt(x._2,y._1,y._3)) ::: ss(P_ForTok__LParenTok,P_ForInfo__RParenTok__Stmt)((x,y) => y._1(y._3)) ::: ss(P_IfTok__ParenExp,P_Option_ThenTok__Stmt)((x,y) => IfAStmt(x._2,y._2)) ::: ts(P_ThrowTok,P_ExpJuxt)((x,y) => ThrowAStmt(y)) ::: ts(P_SynchronizedTok,P_MaybeParenExp__Block)((x,y) => SyncAStmt(y._1,BlockAStmt(y._2))) ::: ss(P_DoTok__MaybeStmt,P_WhileUntil__MaybeParenExp)((x,y) => DoAStmt(x._2,y._2,y._1)) ::: ss(P_ForTok__ForInfo,P_DoTok__Stmt)((x,y) => x._2(y._2)) ::: ns(P_Juxts0_Mod,P_Type__List1_VarDecl)((x,y) => VarAStmt(x,y._1,y._2)) ::: ts(P_IfTok,P_ExpAssignNP)((x,y) => IfAStmt(y,EmptyAStmt())) ::: ts(P_AssertTok,P_ExpJuxt)((x,y) => AssertAStmt(y,None)) ::: tn(P_ContinueTok,P_Option_Ident)((x,y) => ContinueAStmt(y)) ::: ss(P_WhileUntil__ExpAssignNP,P_DoTok__Stmt)((x,y) => WhileAStmt(x._2,y._2,x._1)) ::: s(P_ExpAssign)(x => ExpAStmt(x)) ::: tn(P_ReturnTok,P_Option_ExpJuxt)((x,y) => ReturnAStmt(y)) ::: ss(P_AssertTok__ExpJuxt,P_ColonTok__ExpJuxt)((x,y) => AssertAStmt(x._2,Some(y._2))) ::: ss(P_IfTok__ExpAssignNP__ThenTok,P_MaybeStmt__ElseTok__Stmt)((x,y) => IfElseAStmt(x._2,y._1,y._3)) ::: ss(P_WhileUntil,P_ExpAssignNP)((x,y) => WhileAStmt(y,EmptyAStmt(),x)) ::: s(P_Block)(x => BlockAStmt(x)); d("StmtHelperBS",P_StmtHelperBS)
      P_StmtHelper((lo,hi)) = ts(P_SynchronizedTok,P_MaybeParenExp)((x,y) => SyncAStmt(y,HoleAStmt())) ::: ss(P_IfTok__ParenExp,P_Option_ThenTok__MaybeStmt__ElseTok)((x,y) => IfElseAStmt(x._2,y._2,HoleAStmt())) ::: ss(P_WhileUntil,P_MaybeParenExp__Option_DoTok)((x,y) => WhileAStmt(y._1,HoleAStmt(),x)) ::: ss(P_ForTok__LParenTok,P_ForInfo__RParenTok)((x,y) => y._1(HoleAStmt())) ::: s(P_StmtHelperBS)(x => x) ::: ts(P_ForTok,P_ForInfo)((x,y) => y(HoleAStmt())) ::: ss(P_IfTok__ExpAssignNP,P_ThenTok__MaybeStmt__ElseTok)((x,y) => IfElseAStmt(x._2,y._2,HoleAStmt())) ::: ts(P_IfTok,P_MaybeParenExp__Option_ThenTok)((x,y) => IfAStmt(y._1,HoleAStmt())); d("StmtHelper",P_StmtHelper)
      P_Stmts((lo,hi)) = tn(P_SemiTok,P_Stmts)((x,y) => EmptyAStmt() :: y) ::: s(P_StmtHelper)(x => List(x)) ::: ss(P_StmtHelperBS,P_SemiTok__Stmts)((x,y) => x :: y._2); d("Stmts",P_Stmts)
      P_Stmt((lo,hi)) = t(P_SemiTok)(x => EmptyAStmt()) ::: s(P_StmtHelper)(x => x) ::: st(P_StmtHelperBS,P_SemiTok)((x,y) => x); d("Stmt",P_Stmt)
      P_Option_ThenTok__Stmt((lo,hi)) = ns(P_Option_ThenTok,P_Stmt)((x,y) => (x,y)); d("Option_ThenTok__Stmt",P_Option_ThenTok__Stmt)
      P_MaybeStmt((lo,hi)) = s(P_Stmt)(x => x); d("MaybeStmt",P_MaybeStmt)
      P_Option_DoTok__Stmt((lo,hi)) = ns(P_Option_DoTok,P_Stmt)((x,y) => (x,y)); d("Option_DoTok__Stmt",P_Option_DoTok__Stmt)
      P_Commas1_StmtHelperBS((lo,hi)) = s(P_StmtHelperBS)(x => List(x)) ::: ss(P_StmtHelperBS,P_CommaTok__Commas1_StmtHelperBS)((x,y) => x :: y._2); d("Commas1_StmtHelperBS",P_Commas1_StmtHelperBS)
      P_Commas0_StmtHelperBS((lo,hi)) = s(P_Commas1_StmtHelperBS)(x => x); d("Commas0_StmtHelperBS",P_Commas0_StmtHelperBS)
      P_ExpAssignNC((lo,hi)) = s(P_ExpCond_ExpJuxt)(x => x) ::: ss(P_ExpJuxt,P_AssignOp__ExpAssign)((x,y) => AssignAExp(y._1,x,y._2)); d("ExpAssignNC",P_ExpAssignNC)
      P_Juxts1_ExpAssignNC((lo,hi)) = s(P_ExpAssignNC)(x => List(x)) ::: ss(P_ExpAssignNC,P_Juxts1_ExpAssignNC)((x,y) => x :: y); d("Juxts1_ExpAssignNC",P_Juxts1_ExpAssignNC)
      P_Commas1_ExpAssignNC((lo,hi)) = s(P_ExpAssignNC)(x => List(x)) ::: ss(P_ExpAssignNC,P_CommaTok__Commas1_ExpAssignNC)((x,y) => x :: y._2); d("Commas1_ExpAssignNC",P_Commas1_ExpAssignNC)
      P_Commas0_ExpAssignNC((lo,hi)) = s(P_Commas1_ExpAssignNC)(x => x); d("Commas0_ExpAssignNC",P_Commas0_ExpAssignNC)
      P_List1_ExpAssignNC((lo,hi)) = s(P_ExpAssignNC)(x => SingleList(x)) ::: s(P_Commas2_ExpAssignNC)(x => CommaList(x)) ::: s(P_Juxts2_ExpAssignNC)(x => JuxtList(x)); d("List1_ExpAssignNC",P_List1_ExpAssignNC)
      P_List_ExpAssignNC((lo,hi)) = s(P_List1_ExpAssignNC)(x => x); d("List_ExpAssignNC",P_List_ExpAssignNC)
      P_ExpUnary_ExpNew((lo,hi)) = s(P_ExpNew)(x => x) ::: ss(P_ExpUnary_ExpJuxt,P_PostOp)((x,y) => UnaryAExp(y,x)) ::: ss(P_PreOp,P_ExpUnary_ExpJuxt)((x,y) => UnaryAExp(x,y)) ::: ss(P_LParenTok__Type,P_RParenTok__ExpUnary_ExpJuxt)((x,y) => CastAExp(x._2,y._2)); d("ExpUnary_ExpNew",P_ExpUnary_ExpNew)
      P_ExpMul_ExpNew((lo,hi)) = s(P_ExpUnary_ExpNew)(x => x) ::: ss(P_ExpMul_ExpJuxt,P_MulTok__ExpUnary_ExpNew)((x,y) => BinaryAExp(MulOp,x,y._2)) ::: ss(P_ExpMul_ExpJuxt,P_DivTok__ExpUnary_ExpNew)((x,y) => BinaryAExp(DivOp,x,y._2)) ::: ss(P_ExpMul_ExpJuxt,P_ModTok__ExpUnary_ExpNew)((x,y) => BinaryAExp(ModOp,x,y._2)); d("ExpMul_ExpNew",P_ExpMul_ExpNew)
      P_ExpAdd_ExpNew((lo,hi)) = s(P_ExpMul_ExpNew)(x => x) ::: ss(P_ExpAdd_ExpJuxt,P_PlusTok__ExpMul_ExpNew)((x,y) => BinaryAExp(AddOp,x,y._2)) ::: ss(P_ExpAdd_ExpJuxt,P_MinusTok__ExpMul_ExpNew)((x,y) => BinaryAExp(SubOp,x,y._2)); d("ExpAdd_ExpNew",P_ExpAdd_ExpNew)
      P_ExpShift_ExpNew((lo,hi)) = s(P_ExpAdd_ExpNew)(x => x) ::: ss(P_ExpShift_ExpJuxt,P_LShiftTok__ExpAdd_ExpJuxt)((x,y) => BinaryAExp(LShiftOp,x,y._2)) ::: ss(P_ExpShift_ExpJuxt,P_RShiftTok__ExpAdd_ExpJuxt)((x,y) => BinaryAExp(RShiftOp,x,y._2)) ::: ss(P_ExpShift_ExpJuxt,P_UnsignedRShiftTok__ExpAdd_ExpJuxt)((x,y) => BinaryAExp(UnsignedRShiftOp,x,y._2)); d("ExpShift_ExpNew",P_ExpShift_ExpNew)
      P_ExpRel_ExpNew((lo,hi)) = ss(P_ExpRel_ExpJuxt,P_LtTok__ExpShift_ExpJuxt)((x,y) => BinaryAExp(LtOp,x,y._2)) ::: ss(P_ExpRel_ExpJuxt,P_GeTok__ExpShift_ExpJuxt)((x,y) => BinaryAExp(GeOp,x,y._2)) ::: ss(P_ExpRel_ExpJuxt,P_LeTok__ExpShift_ExpJuxt)((x,y) => BinaryAExp(LeOp,x,y._2)) ::: ss(P_ExpRel_ExpJuxt,P_InstanceofTok__Type)((x,y) => InstanceofAExp(x,y._2)) ::: ss(P_ExpRel_ExpJuxt,P_GtTok__ExpShift_ExpJuxt)((x,y) => BinaryAExp(GtOp,x,y._2)) ::: s(P_ExpShift_ExpNew)(x => x); d("ExpRel_ExpNew",P_ExpRel_ExpNew)
      P_ExpEq_ExpNew((lo,hi)) = s(P_ExpRel_ExpNew)(x => x) ::: ss(P_ExpEq_ExpJuxt,P_EqEqTok__ExpRel_ExpJuxt)((x,y) => BinaryAExp(EqOp,x,y._2)) ::: ss(P_ExpEq_ExpJuxt,P_NeTok__ExpRel_ExpJuxt)((x,y) => BinaryAExp(NeOp,x,y._2)); d("ExpEq_ExpNew",P_ExpEq_ExpNew)
      P_ExpAnd_ExpNew((lo,hi)) = s(P_ExpEq_ExpNew)(x => x) ::: ss(P_ExpAnd_ExpJuxt,P_AndTok__ExpEq_ExpJuxt)((x,y) => BinaryAExp(AndOp,x,y._2)); d("ExpAnd_ExpNew",P_ExpAnd_ExpNew)
      P_ExpXor_ExpNew((lo,hi)) = s(P_ExpAnd_ExpNew)(x => x) ::: ss(P_ExpXor_ExpJuxt,P_XorTok__ExpAnd_ExpJuxt)((x,y) => BinaryAExp(XorOp,x,y._2)); d("ExpXor_ExpNew",P_ExpXor_ExpNew)
      P_ExpOr_ExpNew((lo,hi)) = s(P_ExpXor_ExpNew)(x => x) ::: ss(P_ExpOr_ExpJuxt,P_OrTok__ExpXor_ExpJuxt)((x,y) => BinaryAExp(OrOp,x,y._2)); d("ExpOr_ExpNew",P_ExpOr_ExpNew)
      P_ExpAndAnd_ExpNew((lo,hi)) = s(P_ExpOr_ExpNew)(x => x) ::: ss(P_ExpAndAnd_ExpJuxt,P_AndAndTok__ExpOr_ExpJuxt)((x,y) => BinaryAExp(AndAndOp,x,y._2)); d("ExpAndAnd_ExpNew",P_ExpAndAnd_ExpNew)
      P_ExpOrOr_ExpNew((lo,hi)) = s(P_ExpAndAnd_ExpNew)(x => x) ::: ss(P_ExpOrOr_ExpJuxt,P_OrOrTok__ExpAndAnd_ExpJuxt)((x,y) => BinaryAExp(OrOrOp,x,y._2)); d("ExpOrOr_ExpNew",P_ExpOrOr_ExpNew)
      P_ExpCond_ExpNew((lo,hi)) = s(P_ExpOrOr_ExpNew)(x => x) ::: ss(P_ExpOrOr_ExpJuxt__QuestionTok,P_ExpAssign__ColonTok__ExpCond_ExpJuxt)((x,y) => CondAExp(x._1,y._1,y._3)); d("ExpCond_ExpNew",P_ExpCond_ExpNew)
      P_Juxts1_ExpNew((lo,hi)) = s(P_ExpNew)(x => List(x)) ::: ss(P_ExpNew,P_Juxts1_ExpNew)((x,y) => x :: y); d("Juxts1_ExpNew",P_Juxts1_ExpNew)
      P_ForeachSep((lo,hi)) = t(P_ColonTok)(x => ()) ::: t(P_InTok)(x => ()); d("ForeachSep",P_ForeachSep)
      P_ExpHigh__ColonColonTok((lo,hi)) = st(P_ExpHigh,P_ColonColonTok)((x,y) => (x,y)); d("ExpHigh__ColonColonTok",P_ExpHigh__ColonColonTok)
      P_Commas2_VarDecl((lo,hi)) = ss(P_VarDecl,P_CommaTok__Commas1_VarDecl)((x,y) => x :: y._2); d("Commas2_VarDecl",P_Commas2_VarDecl)
      P_List1_VarDecl((lo,hi)) = s(P_VarDecl)(x => SingleList(x)) ::: s(P_Commas2_VarDecl)(x => CommaList(x)) ::: s(P_Juxts2_VarDecl)(x => JuxtList(x)); d("List1_VarDecl",P_List1_VarDecl)
      P_WhileUntil__MaybeParenExp((lo,hi)) = ss(P_WhileUntil,P_MaybeParenExp)((x,y) => (x,y)); d("WhileUntil__MaybeParenExp",P_WhileUntil__MaybeParenExp)
      P_ForTok__ForInfo((lo,hi)) = ts(P_ForTok,P_ForInfo)((x,y) => (x,y)); d("ForTok__ForInfo",P_ForTok__ForInfo)
      P_List_ExpAssignNC__RBrackTok((lo,hi)) = nt(P_List_ExpAssignNC,P_RBrackTok)((x,y) => (x,y)); d("List_ExpAssignNC__RBrackTok",P_List_ExpAssignNC__RBrackTok)
      P_GtTok__ExpShift_ExpJuxt((lo,hi)) = ts(P_GtTok,P_ExpShift_ExpJuxt)((x,y) => (x,y)); d("GtTok__ExpShift_ExpJuxt",P_GtTok__ExpShift_ExpJuxt)
      P_WhileUntil__ExpAssignNP((lo,hi)) = ss(P_WhileUntil,P_ExpAssignNP)((x,y) => (x,y)); d("WhileUntil__ExpAssignNP",P_WhileUntil__ExpAssignNP)
      P_Option_TypeArgs__NewTok((lo,hi)) = nt(P_Option_TypeArgs,P_NewTok)((x,y) => (x,y)); d("Option_TypeArgs__NewTok",P_Option_TypeArgs__NewTok)
    }
    
    // All done!
    P_Stmts((0,n))
  }
}
