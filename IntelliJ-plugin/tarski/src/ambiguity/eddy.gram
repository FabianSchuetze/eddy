name ParseEddy
start Stmts
token Token

preamble package tarski
preamble import tarski.Tokens._
preamble import tarski.AST._
preamble import tarski.Types._
preamble import tarski.Operators._

// Identifiers, including fake keywords
Ident Name
  IdentTok { $1.name }
  ThenTok  { "then" }
  UntilTok { "until" }
  InTok    { "in" }

// Modifiers
Mod Mod
  AtTok Ident                    { Annotation($2) }
  PublicTok                      { Public }
  ProtectedTok                   { Protected }
  PrivateTok                     { Private }
  AbstractTok                    { Abstract }
  StaticTok                      { Static }
  FinalTok                       { Final }
  StrictfpTok                    { Strictfp }
  TransientTok                   { Transient }
  VolatileTok                    { Volatile }
  SynchronizedTok                { Synchronized }

// Option
Option[a] Option[a]
  ""                             { None }
  a                              { Some($1) }

// Lists
Commas1[a] List[a]
  a                              { List($1) }
  a CommaTok Commas1[a]          { $1 :: $3 }
Commas2[a] List[a]
  a CommaTok Commas1[a]          { $1 :: $3 }
Juxts1[a] List[a]
  a                              { List($1) }
  a Juxts1[a]                    { $1 :: $2 }
Juxts2[a] List[a]
  a Juxts1[a]                    { $1 :: $2 }
SingleJuxt1[a] KList[a]
  a                              { SingleList($1) }
  Juxts2[a]                      { JuxtList($1) }
Ands[a] List[a]
  a                              { List($1) }
  a AndTok Ands[a]               { $1 :: $3 }
List[a] KList[a]
  ""                             { EmptyList }
  List1[a]                       { $1 }
List1[a] KList[a]
  a                              { SingleList($1) }
  Commas2[a]                     { CommaList($1) }
  Juxts2[a]                      { JuxtList($1) }
List2[a] KList[a]
  a CommaTok Commas1[a]          { CommaList($1::$3) }
  a Juxts1[a]                    { JuxtList($1::$2) }
Juxts0[a] List[a]
  ""                             { Nil }
  Juxts1[a]                      { $1 }
Commas0[a] List[a]
  ""                             { Nil }
  Commas1[a]                     { $1 }

// Dims
IdentDims (Name,Int)
  Ident                          { ($1,0) }
  IdentDims LBrackTok RBrackTok  { ($1._1,$1._2+1) }

// Types.  Most of the logic is shared with expressions.
Type AExp
  ExpHigh                           { $1 }
  QuestionTok WildcardBounds        { WildAExp($2) }
TypeArgs KList[AExp]
  LtTok List[Type] GtTok            { $2 }
WildcardBounds Option[(Bound,AExp)]
  ""                                { None }
  ExtendsTok Type                   { Some((Extends(),$2)) }
  ColonTok Type                     { Some((Extends(),$2)) }
  SuperTok Type                     { Some((Super(),$2)) }

// Type parameters
//TypeParam
//  Mod Ident Option[TypeBounds]
//TypeBounds
//  ExtendsTok TypeBoundArgs
//  ColonTok TypeBoundArgs
//TypeBoundArgs
//  List1[Type]
//  Ands[Type]

// Classes
// TODO: ClassDecl

// Blocks
Block List[AStmt]
  LCurlyTok Stmts RCurlyTok      { $2 }
Stmts List[AStmt]
  ""                             { Nil }
  SemiTok Stmts                  { EmptyAStmt() :: $2 }
  StmtHelper                     { List($1) }
  StmtHelperBS SemiTok Stmts     { $1 :: $3 }

// Statement
// Suffix BS means before semicolon
Stmt AStmt
  SemiTok                                                    { EmptyAStmt() }
  StmtHelper                                                 { $1 }
  StmtHelperBS SemiTok                                       { $1 }
MaybeStmt AStmt
  ""                                                         { HoleAStmt() }
  Stmt                                                       { $1 }
StmtHelper AStmt
  StmtHelperBS                                               { $1 }
  IfTok MaybeParenExp Option[ThenTok]                        { IfAStmt($2,HoleAStmt()) }
  IfTok ParenExp Option[ThenTok] MaybeStmt ElseTok           { IfElseAStmt($2,$4,HoleAStmt()) }
  IfTok ExpAssignNP ThenTok MaybeStmt ElseTok                { IfElseAStmt($2,$4,HoleAStmt()) }
  WhileUntil MaybeParenExp Option[DoTok]                     { WhileAStmt($2,HoleAStmt(),$1) }
  ForTok LParenTok ForInfo RParenTok                         { $3(HoleAStmt()) }
  ForTok ForInfo                                             { $2(HoleAStmt()) }
  SynchronizedTok MaybeParenExp                              { SyncAStmt($2,HoleAStmt()) }
StmtHelperBS AStmt
  Juxts0[Mod] Type List1[VarDecl]                            { VarAStmt($1,$2,$3) }
  Block                                                      { BlockAStmt($1) }
  ExpAssign                                                  { ExpAStmt($1) }
  AssertTok ExpJuxt                                          { AssertAStmt($2,None) }
  AssertTok ExpJuxt ColonTok ExpJuxt                         { AssertAStmt($2,Some($4)) }
  BreakTok Option[Ident]                                     { BreakAStmt($2) }
  ContinueTok Option[Ident]                                  { ContinueAStmt($2) }
  ReturnTok Option[ExpJuxt]                                  { ReturnAStmt($2) }
  ThrowTok ExpJuxt                                           { ThrowAStmt($2) }
  // LabelStmt
  IfTok ParenExp Option[ThenTok] Stmt                        { IfAStmt($2,$4) }
  IfTok ExpAssignNP ThenTok Stmt                             { IfAStmt($2,$4) }
  IfTok ExpAssignNP                                          { IfAStmt($2,EmptyAStmt()) }
  IfTok ExpAssignNP                                          { IfElseAStmt($2,EmptyAStmt(),HoleAStmt()) }
  IfTok ParenExp Option[ThenTok] MaybeStmt ElseTok Stmt      { IfElseAStmt($2,$4,$6) }
  IfTok ExpAssignNP ThenTok MaybeStmt ElseTok Stmt           { IfElseAStmt($2,$4,$6) }
  WhileUntil ParenExp Option[DoTok] Stmt                     { WhileAStmt($2,$4,$1) }
  WhileUntil ExpAssignNP DoTok Stmt                          { WhileAStmt($2,$4,$1) }
  WhileUntil ExpAssignNP                                     { WhileAStmt($2,EmptyAStmt(),$1) }
  DoTok MaybeStmt WhileUntil MaybeParenExp                   { DoAStmt($2,$4,$3) }
  ForTok LParenTok ForInfo RParenTok Stmt                    { $3($5) }
  ForTok ForInfo DoTok Stmt                                  { $2($4) }
  SynchronizedTok MaybeParenExp Block                        { SyncAStmt($2,BlockAStmt($3)) }
  // Try
  // Switch
VarDecl (Name,Int,Option[AExp])
  IdentDims                      { ($1._1,$1._2,None) }
  IdentDims EqTok ExpCommas      { ($1._1,$1._2,Some($3)) }
WhileUntil Boolean
  WhileTok                                                   { false }
  UntilTok                                                   { true }
ForInfo AStmt=>AStmt
  Commas0[StmtHelperBS] SemiTok Option[ExpAssign] SemiTok Commas0[ExpAssignNC]  { (s: AStmt) => ForAStmt($1,$3,$5,s) }
  Juxts0[Mod] Option[Type] IdentDims ForeachSep ExpAssign                       { (s: AStmt) => ForeachAStmt($1,$2,$3._1,$3._2,$5,s) }
ForeachSep Unit
  ColonTok                                                   { () }
  InTok                                                      { () }
ParenExp AExp
  LParenTok ExpAssign RParenTok                              { $2 }
MaybeParenExp AExp
  ExpAssignNP                                                { $1 }
  ParenExp                                                   { $1 }

// Expressions, lowest to highest precedence
// Suffixes: NJ is no juxtaposition, NC is no commas, NA is no args, NP is no parens (or commas)
// TODO LambdaExp
// TODO new Exp ClassBody
ExpAssign AExp
  ExpCommas                                                 { $1 }
  ExpJuxt AssignOp ExpAssign                                { AssignAExp($2,$1,$3) }
ExpAssignNC AExp
  ExpBinary                                                 { $1 }
  ExpJuxt AssignOp ExpAssign                                { AssignAExp($2,$1,$3) }
ExpAssignNP AExp
  ExpBinaryNP                                               { $1 }
  ExpJuxt AssignOp ExpAssign                                { AssignAExp($2,$1,$3) }

ExpCommas AExp
  ExpBinary                                                 { $1 }
  Commas2[ExpBinary]                                        { ArrayAExp(CommaList($1),NoAround) }

alias EJ ExpJuxt
alias ExpBinary   ExpCond[ExpJuxt]
alias ExpBinaryNJ ExpCond[ExpNew]
alias ExpBinaryNP ExpCond[ExpJuxtNP]
ExpCond[a] AExp
  ExpOrOr[a]                                                { $1 }
  ExpOrOr[EJ] QuestionTok ExpAssign ColonTok ExpCond[EJ]    { CondAExp($1,$3,$5) }
ExpOrOr[a] AExp
  ExpAndAnd[a]                                              { $1 }
  ExpOrOr[EJ] OrOrTok ExpAndAnd[EJ]                         { BinaryAExp(OrOrOp,$1,$3) }
ExpAndAnd[a] AExp
  ExpOr[a]                                                  { $1 }
  ExpAndAnd[EJ] AndAndTok ExpOr[EJ]                         { BinaryAExp(AndAndOp,$1,$3) }
ExpOr[a] AExp
  ExpXor[a]                                                 { $1 }
  ExpOr[EJ] OrTok ExpXor[EJ]                                { BinaryAExp(OrOp,$1,$3) }
ExpXor[a] AExp
  ExpAnd[a]                                                 { $1 }
  ExpXor[EJ] XorTok ExpAnd[EJ]                              { BinaryAExp(XorOp,$1,$3) }
ExpAnd[a] AExp
  ExpEq[a]                                                  { $1 }
  ExpAnd[EJ] AndTok ExpEq[EJ]                               { BinaryAExp(AndOp,$1,$3) }
ExpEq[a] AExp
  ExpRel[a]                                                 { $1 }
  ExpEq[EJ] EqEqTok ExpRel[EJ]                              { BinaryAExp(EqOp,$1,$3) }
  ExpEq[EJ] NeTok ExpRel[EJ]                                { BinaryAExp(NeOp,$1,$3) }
ExpRel[a] AExp
  ExpShift[a]                                               { $1 }
  ExpRel[EJ] LtTok ExpShift[EJ]                             { BinaryAExp(LtOp,$1,$3) }
  ExpRel[EJ] GtTok ExpShift[EJ]                             { BinaryAExp(GtOp,$1,$3) }
  ExpRel[EJ] LeTok ExpShift[EJ]                             { BinaryAExp(LeOp,$1,$3) }
  ExpRel[EJ] GeTok ExpShift[EJ]                             { BinaryAExp(GeOp,$1,$3) }
  ExpRel[EJ] InstanceofTok Type                             { InstanceofAExp($1,$3) }
ExpShift[a] AExp
  ExpAdd[a]                                                 { $1 }
  ExpShift[EJ] LShiftTok ExpAdd[EJ]                         { BinaryAExp(LShiftOp,$1,$3) }
  ExpShift[EJ] RShiftTok ExpAdd[EJ]                         { BinaryAExp(RShiftOp,$1,$3) }
  ExpShift[EJ] UnsignedRShiftTok ExpAdd[EJ]                 { BinaryAExp(UnsignedRShiftOp,$1,$3) }
ExpAdd[a] AExp
  ExpMul[a]                                                 { $1 }
  ExpAdd[EJ] PlusTok ExpMul[a]                              { BinaryAExp(AddOp,$1,$3) }
  ExpAdd[EJ] MinusTok ExpMul[a]                             { BinaryAExp(SubOp,$1,$3) }
ExpMul[a] AExp
  ExpUnary[a]                                               { $1 }
  ExpMul[EJ] MulTok ExpUnary[a]                             { BinaryAExp(MulOp,$1,$3) }
  ExpMul[EJ] DivTok ExpUnary[a]                             { BinaryAExp(DivOp,$1,$3) }
  ExpMul[EJ] ModTok ExpUnary[a]                             { BinaryAExp(ModOp,$1,$3) }
ExpUnary[a] AExp
  a                                                         { $1 }
  ExpUnary[EJ] PostOp                                       { UnaryAExp($2,$1) }
  PreOp ExpUnary[EJ]                                        { UnaryAExp($1,$2) }
  LParenTok Type RParenTok ExpUnary[EJ]                     { CastAExp($2,$4) }

ExpJuxt AExp
  ExpNew                                                    { $1 }
  ExpNew SingleJuxt1[ExpNewNA]                              { ApplyAExp($1,$2,NoAround) }
ExpJuxtNP AExp
  ExpNewNP                                                  { $1 }
  ExpNew SingleJuxt1[ExpNewNA]                              { ApplyAExp($1,$2,NoAround) }

ExpNew AExp
  ExpHigh                                                   { $1 }
  NewTok Option[TypeArgs] ExpJuxt                           { NewAExp($2,$3) }
  QuestionTok WildcardBounds                                { WildAExp($2) }
ExpNewNA AExp
  ExpHighNA                                                 { $1 }
  NewTok Option[TypeArgs] ExpJuxt                           { NewAExp($2,$3) }
  QuestionTok WildcardBounds                                { WildAExp($2) }
ExpNewNP AExp
  ExpHighNP                                                 { $1 }
  NewTok Option[TypeArgs] ExpJuxt                           { NewAExp($2,$3) }
  QuestionTok WildcardBounds                                { WildAExp($2) }

ExpHigh AExp
  ExpParens                                                 { $1 }
  ExpHighNP                                                 { $1 }
ExpHighNP AExp
  ExpHighNA                                                 { $1 }
  LBrackTok RBrackTok                                       { ArrayAExp(EmptyList,     BrackAround) }
  LBrackTok ExpBinaryNJ RBrackTok                           { ArrayAExp(SingleList($2),BrackAround) }
  LBrackTok Commas2[ExpBinary] RBrackTok                    { ArrayAExp(CommaList($2), BrackAround) }
  LBrackTok Juxts2[ExpNew] RBrackTok                        { ArrayAExp(JuxtList($2),  BrackAround) }
  LCurlyTok RCurlyTok                                       { ArrayAExp(EmptyList,     CurlyAround) }
  LCurlyTok ExpBinaryNJ RCurlyTok                           { ArrayAExp(SingleList($2),CurlyAround) }
  LCurlyTok Commas2[ExpBinary] RCurlyTok                    { ArrayAExp(CommaList($2), CurlyAround) }
  LCurlyTok Juxts2[ExpNew] RCurlyTok                        { ArrayAExp(JuxtList($2),  CurlyAround) }
ExpParens AExp
  LParenTok ExpAssignNC RParenTok                           { ParenAExp($2) }
  LParenTok RParenTok                                       { ArrayAExp(EmptyList,     ParenAround) }
  LParenTok Commas2[ExpBinary] RParenTok                    { ArrayAExp(CommaList($2), ParenAround) }
  LParenTok Juxts2[ExpNew] RParenTok                        { ArrayAExp(JuxtList($2),  ParenAround) }
ExpHighNA AExp
  Ident                                                     { NameAExp($1) }
  Lit                                                       { $1 }
  ExpHigh DotTok Option[TypeArgs] Ident                     { FieldAExp($1,$3,$4) }
  ExpHigh LParenTok List[ExpAssignNC] RParenTok             { ApplyAExp($1,$3,ParenAround) }
  ExpHigh LBrackTok List[ExpAssignNC] RBrackTok             { ApplyAExp($1,$3,BrackAround) }
  ExpHigh LCurlyTok List[ExpAssignNC] RCurlyTok             { ApplyAExp($1,$3,CurlyAround) }
  ExpHigh ColonColonTok Option[TypeArgs] Ident              { MethodRefAExp($1,$3,$4) }
  ExpHigh ColonColonTok Option[TypeArgs] NewTok             { NewRefAExp($1,$3) }
  ExpHigh TypeArgs                                          { TypeApplyAExp($1,$2) }

Lit ALit
  IntLitTok     { IntALit($1.v) }
  LongLitTok    { LongALit($1.v) }
  FloatLitTok   { FloatALit($1.v) }
  DoubleLitTok  { DoubleALit($1.v) }
  BoolLitTok    { BoolALit($1.v) }
  CharLitTok    { CharALit($1.v) }
  StringLitTok  { StringALit($1.v) }
  NullLitTok    { NullALit() }

PostOp UnaryOp
  PlusPlusTok    { PostIncOp }
  MinusMinusTok  { PostDecOp }

PreOp UnaryOp
  PlusPlusTok    { PreIncOp }
  MinusMinusTok  { PreDecOp }
  PlusTok        { PosOp }
  MinusTok       { NegOp }
  CompTok        { CompOp }
  NotTok         { NotOp }

AssignOp Option[AssignOp]
  EqTok                { None }
  MulEqTok             { Some(MulOp) }
  DivEqTok             { Some(DivOp) }
  ModEqTok             { Some(ModOp) }
  PlusEqTok            { Some(AddOp) }
  MinusEqTok           { Some(SubOp) }
  LShiftEqTok          { Some(LShiftOp) }
  RShiftEqTok          { Some(RShiftOp) }
  UnsignedRShiftEqTok  { Some(UnsignedRShiftOp) }
  AndEqTok             { Some(AndOp) }
  XorEqTok             { Some(XorOp) }
  OrEqTok              { Some(OrOp) }