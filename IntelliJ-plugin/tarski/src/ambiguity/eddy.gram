name ParseEddy
start Stmts
token Token

preamble package tarski
preamble import tarski.Tokens._
preamble import tarski.AST._

// Modifiers
Mod Mod
  AtTok IdentTok                 { Annotation($2.name) }
  PublicTok                      { Public() }
  ProtectedTok                   { Protected() }
  PrivateTok                     { Private() }
  AbstractTok                    { Abstract() }
  StaticTok                      { Static() }
  FinalTok                       { Final() }
  StrictfpTok                    { Strictfp() }
  TransientTok                   { Transient() }
  VolatileTok                    { Volatile() }
  SynchronizedTok                { Synchronized() }

// Option
Option[a] Option[a]
  ""                             { None }
  a                              { Some($1) }

// Lists
Commas1[a] List[a]
  a                              { List($1) }
  a CommaTok Commas1[a]          { $1 :: $3 }
Commas2[a] List[a]
  a CommaTok Commas1[a]          { $1 :: $3 }
Juxts1[a] List[a]
  a                              { List($1) }
  a Juxts1[a]                    { $1 :: $2 }
Juxts2[a] List[a]
  a Juxts1[a]                    { $1 :: $2 }
Ands[a] List[a]
  a                              { List($1) }
  a AndTok Ands[a]               { $1 :: $3 }
List[a] KList[a]
  ""                             { EmptyList }
  List1[a]                       { $1 }
List1[a] KList[a]
  a                              { SingleList($1) }
  Commas2[a]                     { CommaList($1) }
  Juxts2[a]                      { JuxtList($1) }
List2[a] KList[a]
  a CommaTok Commas1[a]          { CommaList($1::$3) }
  a Juxts1[a]                    { JuxtList($1::$2) }
Juxts0[a] List[a]
  ""                             { Nil }
  Juxts1[a]                      { $1 }

// Dims
IdentDims NameDims
  IdentTok                       { ($1.name,0) }
  IdentDims LBrackTok RBrackTok  { ($1._1,$1._2+1) }

// Types
Type Type
  IdentTok                       { NameType($1.name) }
  Mod Type                       { ModType($1,$2) }
  Type LBrackTok RBrackTok       { ArrayType($1) }
  Type TypeArgs                  { ApplyType($1,$2) }
  Type DotTok IdentTok           { FieldType($1,$3.name) }
  QuestionTok WildcardBounds     { WildType($2) }
TypeArgs KList[Type]
  LtTok List[Type] GtTok         { $2 }
WildcardBounds Option[(Bound,Type)]
  ""                             { None }
  ExtendsTok Type                { Some((Extends(),$2)) }
  ColonTok Type                  { Some((Extends(),$2)) }
  SuperTok Type                  { Some((Super(),$2)) }

// Type parameters
//TypeParam
//  Mod IdentTok Option[TypeBounds]
//TypeBounds
//  ExtendsTok TypeBoundArgs
//  ColonTok TypeBoundArgs
//TypeBoundArgs
//  List1[Type]
//  Ands[Type]

// Classes
// TODO: ClassDecl

// Blocks
Block List[Stmt]
  LCurlyTok Stmts RCurlyTok      { $2 }
Stmts List[Stmt]
  ""                             { Nil }
  StmtHelper                     { List($1) }
  StmtHelper SemiTok Stmts       { $1 :: $3 }

// Statement
Stmt Stmt
  SemiTok                            { EmptyStmt() }
  StmtHelper Option[SemiTok]         { $1 }
StmtHelper Stmt
  Juxts0[Mod] Type List1[VarDecl]    { VarStmt($1,$2,$3) }
  // LabelStmt
  // IfThen / IfThenElse
  // While
  // For
  Block                              { BlockStmt($1) }
  ExpAssign                          { ExpStmt($1) }
  AssertTok ExpJuxt                  { AssertStmt($2,None) }
  AssertTok ExpJuxt ColonTok ExpJuxt { AssertStmt($2,Some($4)) }
  // Switch
  // Do
  BreakTok Option[IdentTok]          { BreakStmt($2.map(_.name)) }
  ContinueTok Option[IdentTok]       { ContinueStmt($2.map(_.name)) }
  ReturnTok Option[ExpJuxt]          { ReturnStmt($2) }
  ThrowTok ExpJuxt                   { ThrowStmt($2) }
  SynchronizedTok ExpJuxt Block      { SyncStmt($2,$3) } // Parens handled inside ExpJuxt
  // Try
VarDecl (NameDims,Option[Exp])
  IdentDims                      { ($1,None) }
  IdentDims EqTok ExpCommas      { ($1,Some($3)) }

// Expressions, lowest to highest precedence
// Suffixes: NJ is no juxtaposition, NC is no commas, NA is no args
// TODO LambdaExp
// TODO new Exp ClassBody
ExpAssign Exp
  ExpCommas                                                 { $1 }
  ExpJuxt AssignOp ExpAssign                                { AssignExp($2,$1,$3) }
ExpAssignNC Exp
  ExpBinary                                                 { $1 }
  ExpJuxt AssignOp ExpAssign                                { AssignExp($2,$1,$3) }
ExpCommas Exp
  ExpBinary                                                 { $1 }
  Commas2[ExpBinary]                                        { ArrayExp(CommaList($1),NoAround) }
ExpBinary Exp
  ExpUnary                                                  { $1 }
  ExpBinary BinaryOp ExpBinary                              { BinaryExp($2,$1,$3) }
  ExpBinary QuestionTok ExpAssign ColonTok ExpBinary        { CondExp($1,$3,$5) }
ExpBinaryNJ Exp
  ExpUnaryNJ                                                { $1 }
  ExpBinary BinaryOp ExpBinary                              { BinaryExp($2,$1,$3) }
  ExpBinary QuestionTok ExpAssign ColonTok ExpBinary        { CondExp($1,$3,$5) }
ExpUnary Exp
  ExpJuxt                                                   { $1 }
  ExpUnary PostOp                                           { UnaryExp($2,$1) }
  PreOp ExpUnary                                            { UnaryExp($1,$2) }
  LParenTok Type RParenTok ExpUnary                         { CastExp($2,$4) }
ExpUnaryNJ Exp
  ExpNew                                                    { $1 }
  ExpUnary PostOp                                           { UnaryExp($2,$1) }
  PreOp ExpUnary                                            { UnaryExp($1,$2) }
  LParenTok Type RParenTok ExpUnary                         { CastExp($2,$4) }
ExpJuxt Exp
  ExpNew                                                    { $1 }
  ExpNew Juxts1[ExpNewNA]                                   { ApplyExp($1,JuxtList($2),NoAround) }
ExpNew Exp
  ExpHigh                                                   { $1 }
  NewTok Option[TypeArgs] ExpJuxt                           { NewExp($2,$3) }
  QuestionTok WildcardBounds                                { WildExp($2) }
ExpNewNA Exp
  ExpHighNA                                                 { $1 }
  NewTok Option[TypeArgs] ExpJuxt                           { NewExp($2,$3) }
  QuestionTok WildcardBounds                                { WildExp($2) }
ExpHigh Exp
  ExpHighNA                                                 { $1 }
  LParenTok ExpAssignNC RParenTok                           { ParenExp($2) }
  LParenTok RParenTok                                       { ArrayExp(EmptyList,     ParenAround) }
  LParenTok Commas2[ExpBinary] RParenTok                    { ArrayExp(CommaList($2), ParenAround) }
  LParenTok Juxts2[ExpNew] RParenTok                        { ArrayExp(JuxtList($2),  ParenAround) }
  LBrackTok RBrackTok                                       { ArrayExp(EmptyList,     BrackAround) }
  LBrackTok ExpBinary RBrackTok                             { ArrayExp(SingleList($2),BrackAround) }
  LBrackTok Commas2[ExpBinary] RBrackTok                    { ArrayExp(CommaList($2), BrackAround) }
  LBrackTok Juxts2[ExpNew] RBrackTok                        { ArrayExp(JuxtList($2),  BrackAround) }
  LCurlyTok RCurlyTok                                       { ArrayExp(EmptyList,     CurlyAround) }
  LCurlyTok ExpBinary RCurlyTok                             { ArrayExp(SingleList($2),CurlyAround) }
  LCurlyTok Commas2[ExpBinary] RCurlyTok                    { ArrayExp(CommaList($2), CurlyAround) }
  LCurlyTok Juxts2[ExpNew] RCurlyTok                        { ArrayExp(JuxtList($2),  CurlyAround) }
ExpHighNA Exp
  IdentTok                                                  { NameExp($1.name) }
  Lit                                                       { LitExp($1) }
  ExpHigh DotTok Option[TypeArgs] IdentTok                  { FieldExp($1,$3,$4.name) }
  ExpHigh LParenTok List[ExpAssignNC] RParenTok             { ApplyExp($1,$3,ParenAround) }
  ExpHigh LBrackTok List[ExpAssignNC] RBrackTok             { ApplyExp($1,$3,BrackAround) }
  ExpHigh LCurlyTok List[ExpAssignNC] RCurlyTok             { ApplyExp($1,$3,CurlyAround) }
  ExpHigh ColonColonTok Option[TypeArgs] IdentTok           { MethodRefExp($1,$3,$4.name) }
  ExpHigh ColonColonTok Option[TypeArgs] NewTok             { NewRefExp($1,$3) }
  ExpHigh TypeArgs                                          { TypeApplyExp($1,$2) }

Lit Lit
  IntLitTok     { IntLit($1.v) }
  LongLitTok    { LongLit($1.v) }
  FloatLitTok   { FloatLit($1.v) }
  DoubleLitTok  { DoubleLit($1.v) }
  BoolLitTok    { BoolLit($1.v) }
  CharLitTok    { CharLit($1.v) }
  StringLitTok  { StringLit($1.v) }
  NullLitTok    { NullLit() }

PostOp UnaryOp
  PlusPlusTok    { PostIncOp() }
  MinusMinusTok  { PostDecOp() }

PreOp UnaryOp
  PlusPlusTok    { PreIncOp() }
  MinusMinusTok  { PreDecOp() }
  PlusTok        { PosOp() }
  MinusTok       { NegOp() }
  CompTok        { CompOp() }
  NotTok         { NotOp() }

BinaryOp BinaryOp
  MulTok              { MulOp() }
  DivTok              { DivOp() }
  ModTok              { ModOp() }
  PlusTok             { AddOp() }
  MinusTok            { SubOp() }
  LShiftTok           { LShiftOp() }
  RShiftTok           { RShiftOp() }
  UnsignedRShiftTok   { UnsignedRShiftOp() }
  LtTok               { LtOp() }
  GtTok               { GtOp() }
  LeTok               { LeOp() }
  GeTok               { GeOp() }
  InstanceofTok       { InstanceofOp() }
  EqEqTok             { EqOp() }
  NeTok               { NeOp() }
  AndTok              { AndOp() }
  XorTok              { XorOp() }
  OrTok               { OrOp() }
  AndAndTok           { AndAndOp() }
  OrOrTok             { OrOrOp() }

AssignOp Option[AssignOp]
  EqTok                { None }
  MulEqTok             { Some(MulOp()) }
  DivEqTok             { Some(DivOp()) }
  ModEqTok             { Some(ModOp()) }
  PlusEqTok            { Some(AddOp()) }
  MinusEqTok           { Some(SubOp()) }
  LShiftEqTok          { Some(LShiftOp()) }
  RShiftEqTok          { Some(RShiftOp()) }
  UnsignedRShiftEqTok  { Some(UnsignedRShiftOp()) }
  AndEqTok             { Some(AndOp()) }
  XorEqTok             { Some(XorOp()) }
  OrEqTok              { Some(OrOp()) }