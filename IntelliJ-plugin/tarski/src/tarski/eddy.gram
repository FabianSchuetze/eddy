name ParseEddy
start Stmts
token Token
simple (?<!Lit|Ident)Tok

preamble package tarski
preamble import tarski.Tokens._
preamble import tarski.AST._
preamble import tarski.Types._
preamble import tarski.Operators._

// Identifiers, including fake keywords
Ident String
  IdentTok { $1.name }
  ThenTok  { "then" }
  UntilTok { "until" }
  InTok    { "in" }
  ThisTok  { "this" }
  SuperTok { "super" }

// Modifiers
Mod Mod
  AtTok Ident                    { Annotation($2) }
  PublicTok                      { Public }
  ProtectedTok                   { Protected }
  PrivateTok                     { Private }
  AbstractTok                    { Abstract }
  StaticTok                      { Static }
  FinalTok                       { Final }
  StrictfpTok                    { Strictfp }
  TransientTok                   { Transient }
  VolatileTok                    { Volatile }
  SynchronizedTok                { Synchronized }

// Option
Option[a] Option[a]
  ""                             { None }
  a                              { Some($1) }

// Lists
Commas1[a] List[a]
  a                              { List($1) }
  a CommaTok Commas1[a]          { $1 :: $3 }
Commas2[a] List[a]
  a CommaTok Commas1[a]          { $1 :: $3 }
Juxts1[a] List[a]
  a                              { List($1) }
  a Juxts1[a]                    { $1 :: $2 }
Juxts2[a] List[a]
  a Juxts1[a]                    { $1 :: $2 }
SingleJuxt1[a] KList[a]
  a                              { SingleList($1) }
  Juxts2[a]                      { JuxtList($1) }
Ands[a] List[a]
  a                              { List($1) }
  a AndTok Ands[a]               { $1 :: $3 }
List[a] KList[a]
  ""                             { EmptyList }
  List1[a]                       { $1 }
List1[a] KList[a]
  a                              { SingleList($1) }
  Commas2[a]                     { CommaList($1) }
  Juxts2[a]                      { JuxtList($1) }
List2[a] KList[a]
  a CommaTok Commas1[a]          { CommaList($1::$3) }
  a Juxts1[a]                    { JuxtList($1::$2) }
Juxts0[a] List[a]
  ""                             { Nil }
  Juxts1[a]                      { $1 }
Commas0[a] List[a]
  ""                             { Nil }
  Commas1[a]                     { $1 }

// Dims
IdentDims (String,Int)
  Ident                          { ($1,0) }
  IdentDims LBrackTok Right      { ($1._1,$1._2+1) }

// Types.  Most of the logic is shared with expressions.
Type AExp
  ExpHigh                           { $1 }
  QuestionTok WildcardBounds        { WildAExp($2,$r) }
TypeArgs Located[KList[AExp]]
  LtTok List[Type] GtSep GtTok      { Located($2,$r) }
GtSep Unit
  ""                                { () }
  RShiftSepTok                      { () }
  UnsignedRShiftSepTok              { () }
WildcardBounds Option[(Bound,AExp)]
  ""                                { None }
  ExtendsTok Type                   { Some((Extends,$2)) }
  ColonTok Type                     { Some((Extends,$2)) }
  SuperTok Type                     { Some((Super,$2)) }

// Type parameters
//TypeParam
//  Mod Ident Option[TypeBounds]
//TypeBounds
//  ExtendsTok TypeBoundArgs
//  ColonTok TypeBoundArgs
//TypeBoundArgs
//  List1[Type]
//  Ands[Type]

// Classes
// TODO: ClassDecl

// Blocks
Block List[AStmt]
  LCurlyTok Stmts Right          { $2 }
Stmts List[AStmt]
  ""                             { Nil }
  SemiTok Stmts                  { EmptyAStmt :: $2 }
  StmtHelper                     { List($1) }
  StmtHelperBS SemiTok Stmts     { $1 :: $3 }

// Statement
// Suffix BS means before semicolon
Stmt AStmt
  SemiTok                                                    { EmptyAStmt }
  StmtHelper                                                 { $1 }
  StmtHelperBS SemiTok                                       { $1 }
MaybeStmt AStmt
  ""                                                         { HoleAStmt }
  Stmt                                                       { $1 }
StmtHelper AStmt
  StmtHelperBS                                               { $1 }
  IfTok MaybeParenExp MaybeThen                              { IfAStmt($2._1,HoleAStmt,$2._2,$r) }
  IfTok ParenExp MaybeThen MaybeStmt ElseTok                 { IfElseAStmt($2._1,$4,HoleAStmt,$2._2,$r) }
  IfTok ExpAssignNP ThenTok MaybeStmt ElseTok                { IfElseAStmt($2,$4,HoleAStmt,NoAround,$r) }
  WhileUntil MaybeParenExp MaybeDo                           { WhileAStmt($2._1,HoleAStmt,$1,$2._2,$r) }
  ForTok Left ForInfo Right                                  { ForAStmt($3,HoleAStmt,Grouped($2,$4),$r) }
  ForTok ForInfo                                             { ForAStmt($2,HoleAStmt,NoAround,$r) }
  SynchronizedTok MaybeParenExp                              { SyncAStmt($2._1,HoleAStmt,$2._2,$r) }
StmtHelperBS AStmt
  Juxts0[Mod] Type List1[VarDecl]                            { VarAStmt($1,$2,$3,$r) }
  Block                                                      { BlockAStmt($1,$r) }
  ExpAssign                                                  { ExpAStmt($1) }
  AssertTok ExpJuxt                                          { AssertAStmt($2,None,$r) }
  AssertTok ExpJuxt ColonTok ExpJuxt                         { AssertAStmt($2,Some($4),$r) }
  BreakTok Option[Ident]                                     { BreakAStmt($2,$r) }
  ContinueTok Option[Ident]                                  { ContinueAStmt($2,$r) }
  ReturnTok Option[ExpJuxt]                                  { ReturnAStmt($2,$r) }
  ThrowTok ExpJuxt                                           { ThrowAStmt($2,$r) }
  // LabelStmt
  IfTok ParenExp MaybeThen Stmt                              { IfAStmt($2._1,$4,$2._2,$r) }
  IfTok ExpAssignNP ThenTok Stmt                             { IfAStmt($2,$4,NoAround,$r) }
  IfTok ExpAssignNP                                          { IfAStmt($2,EmptyAStmt,NoAround,$r) }
  IfTok ExpAssignNP                                          { IfElseAStmt($2,EmptyAStmt,HoleAStmt,NoAround,$r) }
  IfTok ParenExp MaybeThen MaybeStmt ElseTok Stmt            { IfElseAStmt($2._1,$4,$6,$2._2,$r) }
  IfTok ExpAssignNP ThenTok MaybeStmt ElseTok Stmt           { IfElseAStmt($2,$4,$6,NoAround,$r) }
  WhileUntil ParenExp MaybeDo Stmt                           { WhileAStmt($2._1,$4,$1,$2._2,$r) }
  WhileUntil ExpAssignNP DoTok Stmt                          { WhileAStmt($2,$4,$1,NoAround,$r) }
  WhileUntil ExpAssignNP                                     { WhileAStmt($2,EmptyAStmt,$1,NoAround,$r) }
  DoTok MaybeStmt WhileUntil MaybeParenExp                   { DoAStmt($2,$4._1,$3,$4._2,$r) }
  ForTok Left ForInfo Right Stmt                             { ForAStmt($3,$5,Grouped($2,$4),$r) }
  ForTok ForInfo DoTok Stmt                                  { ForAStmt($2,$4,NoAround,$r) }
  SynchronizedTok MaybeParenExp Block                        { SyncAStmt($2._1,BlockAStmt($3,$r),$2._2,$r) }
  // Try
  // Switch
VarDecl (String,Int,Option[AExp])
  IdentDims                      { ($1._1,$1._2,None) }
  IdentDims EqTok ExpCommas      { ($1._1,$1._2,Some($3)) }
WhileUntil Boolean
  WhileTok                                                   { false }
  UntilTok                                                   { true }
MaybeThen Unit
  ""                                                         { () }
  ThenTok                                                    { () }
MaybeDo Unit
  ""                                                         { () }
  DoTok                                                      { () }
ForInfo ForInfo
  Commas0[StmtHelperBS] SemiTok Option[ExpAssign] SemiTok Commas0[ExpAssignNC]  { For($1,$3,$5,$r) }
  Juxts0[Mod] Option[Type] IdentDims ForeachSep ExpAssign                       { Foreach($1,$2,$3._1,$3._2,$5,$r) }
ForeachSep Unit
  ColonTok                                                   { () }
  InTok                                                      { () }
ParenExp (AExp,Around)
  Left ExpAssign Right                                       { ($2,Grouped($1,$3)) }
MaybeParenExp (AExp,Around)
  ExpAssignNP                                                { ($1,NoAround) }
  ParenExp                                                   { $1 }

// Expressions, lowest to highest precedence
// Suffixes: NJ is no juxtaposition, NC is no commas, NA is no args, NP is no parens (or commas)
// TODO LambdaExp
// TODO new Exp ClassBody
ExpAssign AExp
  ExpCommas                                                 { $1 }
  ExpJuxt AssignOp ExpAssign                                { AssignAExp($2,$1,$3,$r) }
ExpAssignNC AExp
  ExpBinary                                                 { $1 }
  ExpJuxt AssignOp ExpAssign                                { AssignAExp($2,$1,$3,$r) }
ExpAssignNP AExp
  ExpBinaryNP                                               { $1 }
  ExpJuxt AssignOp ExpAssign                                { AssignAExp($2,$1,$3,$r) }

ExpCommas AExp
  ExpBinary                                                 { $1 }
  Commas2[ExpBinary]                                        { ArrayAExp(CommaList($1),NoAround,$r) }

alias EJ ExpJuxt
alias ExpBinary   ExpCond[ExpJuxt]
alias ExpBinaryNJ ExpCond[ExpWild]
alias ExpBinaryNP ExpCond[ExpJuxtNP]
ExpCond[a] AExp
  ExpOrOr[a]                                                { $1 }
  ExpOrOr[EJ] QuestionTok ExpAssign ColonTok ExpCond[EJ]    { CondAExp($1,$3,$5,$r) }
ExpOrOr[a] AExp
  ExpAndAnd[a]                                              { $1 }
  ExpOrOr[EJ] OrOrTok ExpAndAnd[EJ]                         { BinaryAExp(OrOrOp,$1,$3,$r) }
ExpAndAnd[a] AExp
  ExpOr[a]                                                  { $1 }
  ExpAndAnd[EJ] AndAndTok ExpOr[EJ]                         { BinaryAExp(AndAndOp,$1,$3,$r) }
ExpOr[a] AExp
  ExpXor[a]                                                 { $1 }
  ExpOr[EJ] OrTok ExpXor[EJ]                                { BinaryAExp(OrOp,$1,$3,$r) }
ExpXor[a] AExp
  ExpAnd[a]                                                 { $1 }
  ExpXor[EJ] XorTok ExpAnd[EJ]                              { BinaryAExp(XorOp,$1,$3,$r) }
ExpAnd[a] AExp
  ExpEq[a]                                                  { $1 }
  ExpAnd[EJ] AndTok ExpEq[EJ]                               { BinaryAExp(AndOp,$1,$3,$r) }
ExpEq[a] AExp
  ExpRel[a]                                                 { $1 }
  ExpEq[EJ] EqEqTok ExpRel[EJ]                              { BinaryAExp(EqOp,$1,$3,$r) }
  ExpEq[EJ] NeTok ExpRel[EJ]                                { BinaryAExp(NeOp,$1,$3,$r) }
ExpRel[a] AExp
  ExpShift[a]                                               { $1 }
  ExpRel[EJ] LtTok ExpShift[EJ]                             { BinaryAExp(LtOp,$1,$3,$r) }
  ExpRel[EJ] GtTok ExpShift[EJ]                             { BinaryAExp(GtOp,$1,$3,$r) }
  ExpRel[EJ] LeTok ExpShift[EJ]                             { BinaryAExp(LeOp,$1,$3,$r) }
  ExpRel[EJ] GeTok ExpShift[EJ]                             { BinaryAExp(GeOp,$1,$3,$r) }
  ExpRel[EJ] InstanceofTok Type                             { InstanceofAExp($1,$3,$r) }
ExpShift[a] AExp
  ExpAdd[a]                                                 { $1 }
  ExpShift[EJ] LShiftTok ExpAdd[EJ]                         { BinaryAExp(LShiftOp,$1,$3,$r) }
  ExpShift[EJ] GtTok RShiftSepTok GtTok ExpAdd[EJ]          { BinaryAExp(RShiftOp,$1,$5,$r) }
  ExpShift[EJ] GtTok UnsignedRShiftSepTok GtTok UnsignedRShiftSepTok GtTok ExpAdd[EJ] { BinaryAExp(UnsignedRShiftOp,$1,$7,$r) }
ExpAdd[a] AExp
  ExpMul[a]                                                 { $1 }
  ExpAdd[EJ] PlusTok ExpMul[a]                              { BinaryAExp(AddOp,$1,$3,$r) }
  ExpAdd[EJ] MinusTok ExpMul[a]                             { BinaryAExp(SubOp,$1,$3,$r) }
ExpMul[a] AExp
  ExpUnary[a]                                               { $1 }
  ExpMul[EJ] MulTok ExpUnary[a]                             { BinaryAExp(MulOp,$1,$3,$r) }
  ExpMul[EJ] DivTok ExpUnary[a]                             { BinaryAExp(DivOp,$1,$3,$r) }
  ExpMul[EJ] ModTok ExpUnary[a]                             { BinaryAExp(ModOp,$1,$3,$r) }
ExpUnary[a] AExp
  a                                                         { $1 }
  ExpUnary[EJ] PostOp                                       { UnaryAExp($2,$1,$r) }
  PreOp ExpUnary[EJ]                                        { UnaryAExp($1,$2,$r) }
  LParenTok Type Right ExpUnary[EJ]                         { CastAExp($2,$4,$r) }

ExpJuxt AExp
  ExpWild                                                   { $1 }
  ExpWild SingleJuxt1[ExpWildNA]                            { ApplyAExp($1,$2,NoAround,$r) }
ExpJuxtNP AExp
  ExpWildNP                                                 { $1 }
  ExpWild SingleJuxt1[ExpWildNA]                            { ApplyAExp($1,$2,NoAround,$r) }

ExpWild AExp
  ExpHigh                                                   { $1 }
  QuestionTok WildcardBounds                                { WildAExp($2,$r) }
ExpWildNA AExp
  ExpHighNA                                                 { $1 }
  QuestionTok WildcardBounds                                { WildAExp($2,$r) }
ExpWildNP AExp
  ExpHighNP                                                 { $1 }
  QuestionTok WildcardBounds                                { WildAExp($2,$r) }

ExpHigh AExp
  ExpParens                                                 { $1 }
  ExpHighNP                                                 { $1 }
ExpHighNP AExp
  ExpHighNA                                                 { $1 }
  LeftNP Right                                              { ArrayAExp(EmptyList,     Grouped($1,$2),$r) }
  LeftNP ExpBinaryNJ Right                                  { ArrayAExp(SingleList($2),Grouped($1,$3),$r) }
  LeftNP Commas2[ExpBinary] Right                           { ArrayAExp(CommaList($2), Grouped($1,$3),$r) }
  LeftNP Juxts2[ExpWild] Right                              { ArrayAExp(JuxtList($2),  Grouped($1,$3),$r) }
ExpParens AExp
  LParenTok ExpAssignNC Right                               { ParenAExp($2,           Grouped(Paren,$3),$r) }
  LParenTok Right                                           { ArrayAExp(EmptyList,    Grouped(Paren,$2),$r) }
  LParenTok Commas2[ExpBinary] Right                        { ArrayAExp(CommaList($2),Grouped(Paren,$3),$r) }
  LParenTok Juxts2[ExpWild] Right                           { ArrayAExp(JuxtList($2), Grouped(Paren,$3),$r) }
ExpHighNA AExp
  ExpNew                                                    { $1 }
  ExpHigh Left List[ExpAssignNC] Right                      { ApplyAExp($1,$3,Grouped($2,$4),$r) }
ExpNew AExp
  ExpPrimary                                                { $1 }
  TypeArgs ExpPrimary                                       { TypeApplyAExp($2,$1.x,$1.r,false,$r) }
  NewTok Option[TypeArgs] ExpPrimary                        { NewAExp($2,$3,$r) }
ExpPrimary AExp
  Lit                                                       { $1 }
  Ident                                                     { NameAExp($1,$r) }
  ExpHigh DotTok Option[TypeArgs] Ident                     { FieldAExp($1,$3,$4,$r) }
  ExpHigh TypeArgs                                          { TypeApplyAExp($1,$2.x,$2.r,true,$r) }

// TODO: ExpHigh ColonColonTok Option[TypeArgs] Ident       { MethodRefAExp($1,$3,$4,$r) }
// TODO: ExpHigh ColonColonTok Option[TypeArgs] NewTok      { NewRefAExp($1,$3,$r) }

Left Group
  LParenTok { Paren }
  LBrackTok { Brack }
  LCurlyTok { Curly }
Right Group
  RParenTok { Paren }
  RBrackTok { Brack }
  RCurlyTok { Curly }
LeftNP Group
  LBrackTok { Brack }
  LCurlyTok { Curly }

Lit ALit
  IntLitTok     { IntALit($1.v,$r) }
  LongLitTok    { LongALit($1.v,$r) }
  FloatLitTok   { FloatALit($1.v,$r) }
  DoubleLitTok  { DoubleALit($1.v,$r) }
  CharLitTok    { CharALit($1.v,$r) }
  StringLitTok  { StringALit($1.v,$r) }

PostOp UnaryOp
  PlusPlusTok    { PostIncOp }
  MinusMinusTok  { PostDecOp }

PreOp UnaryOp
  PlusPlusTok    { PreIncOp }
  MinusMinusTok  { PreDecOp }
  PlusTok        { PosOp }
  MinusTok       { NegOp }
  CompTok        { CompOp }
  NotTok         { NotOp }

AssignOp Option[AssignOp]
  EqTok                { None }
  MulEqTok             { Some(MulOp) }
  DivEqTok             { Some(DivOp) }
  ModEqTok             { Some(ModOp) }
  PlusEqTok            { Some(AddOp) }
  MinusEqTok           { Some(SubOp) }
  LShiftEqTok          { Some(LShiftOp) }
  RShiftEqTok          { Some(RShiftOp) }
  UnsignedRShiftEqTok  { Some(UnsignedRShiftOp) }
  AndEqTok             { Some(AndOp) }
  XorEqTok             { Some(XorOp) }
  OrEqTok              { Some(OrOp) }